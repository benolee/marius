class TestCase
  def assert_equal(a,b)
    if a != b
      io.print "failed: expected "
      io.print a
      io.print " to equal "
      io.puts b

      raise "not equal"
    end
  end

  def assert(value)
    unless value
      io.puts "failed: not true"
      raise "failed"
    end
  end

  def refute(value)
    if value
      io.puts "failed: value was true"
      raise "failed"
    end
  end

  def run
    tests = methods().find_all { |t| t.prefix?("test") }
    tests.each { |t| run_test(t) }
  end

  def run_test(name)
    io.print "  "
    io.print name
    io.print ": "

    try
      self.$name
      io.puts "pass"
    rescue e : Exception
      io.print "error: "
      io.puts e.message
    end

  end
end

class Runner
  def run(path)
    a = Importer.current.import(path)
    classes = a.values.detect { |t|
               t.kind_of?(Class) && t < TestCase
              }

    classes.each { |c|
      io.puts c.name
      c.new.run
    }
  end
end
