
%include {
#include "parser_state.hpp"
#include "parser_tokens.h"
#include <iostream>
}

%name r5Parser

%token_type   { r5::ParserToken }
%default_type { r5::ParserToken }

%token_prefix TK_

%left AND.
%left OP0 LT CAST NEQUAL.
%left OP1 PIPE.
%left OP2.
%left NOT.
%left DOT DCOLON DOT_DOLLAR.
%left LSB.

%extra_argument { r5::ParserState* S }

%syntax_error {
  S->set_syntax_error();

  std::cout << "Syntax error at line " << S->line()
            << ", column " << S->column() << std::endl;
}

program ::= opt_fin l1(A) last_fin. { S->set_top(S->ret(A.a)); }

l1(A) ::= l1(B) fin l1e(C). { A.a = S->seq(B.a, C.a); }
l1(A) ::= l1e(B).    { A.a = B.a; }

l1e(A) ::= class(B). { A.a = B.a; }
l1e(A) ::= trait(B). { A.a = B.a; }
l1e(A) ::= def(B).   { A.a = B.a; }
l1e(A) ::= stmt(B).  { A.a = B.a; }

fin_m ::= NL.
fin_m ::= SEMI.

opt_fin ::= .
opt_fin ::= fin.

last_fin ::= EOF.
last_fin ::= fin EOF.

fin ::= fin fin_m.
fin ::= fin_m.

comma ::= COMMA NL.
comma ::= COMMA.

seq(A) ::= seq(B) fin stmt(C). { A.a = S->seq(B.a, C.a); }
seq(A) ::= stmt(B). { A.a = B.a; }

delim_seq(A) ::= seq(B) opt_fin. { A.a = B.a; }

class_start ::= CLASS. { S->start_class(); }
class_body(A) ::= l1(B) fin END. { A.a = B.a; }

class(A) ::= class_start ID(B) fin class_body(C). {
               A.a = S->ast_class(B.s, 0, C.a);
             }

class(A) ::= class_start ID(B) LT s2(C) fin class_body(D). {
               A.a = S->ast_class(B.s, C.a, D.a);
             }

trait_start ::= TRAIT. { S->start_trait(); }
trait_body(A) ::= l1(B) fin END. { A.a = B.a; }

trait(A) ::= trait_start ID(B) fin trait_body(C). {
               A.a = S->trait(B.s, C.a);
             }

def_start ::= DEF. { S->start_def(); }
def_body(A) ::= seq(B) fin END. { A.a = B.a; }

arg ::= ID(A). { S->def_arg(A.s); }
arg ::= ID(A) CAST np_recv(B). { S->def_arg_cast(A.s, B.a); }

id_list ::= id_list comma arg.
id_list ::= arg.

opt_arg ::= ID(A) EQUAL np_recv(B). { S->def_opt_arg(A.s, B.a); }

opt_arg_list ::= opt_arg_list comma opt_arg.
opt_arg_list ::= opt_arg.

def_args ::= .
def_args ::= LP id_list RP.
def_args ::= LP id_list comma opt_arg_list RP.

def_name(A) ::= ID(B).     { A.s = B.s; }
def_name(A) ::= OP0(B).    { A.s = B.s; }
def_name(A) ::= LT(B).     { A.s = B.s; }
def_name(A) ::= OP1(B).    { A.s = B.s; }
def_name(A) ::= OP2(B).    { A.s = B.s; }
def_name(A) ::= SQUARE(B). { A.s = B.s; }

def_scope(A) ::= ID(B). { A.s = B.s; }
def_scope(A) ::= SELF.  { A.s = S->string("self"); }

def(A) ::= def_start def_name(B) def_args fin def_body(C). {
              A.a = S->ast_def(B.s, C.a);
            }
def(A) ::= def_start def_name(B) def_args fin END. {
              A.a = S->ast_def(B.s, S->ast_nil());
            }

def(A) ::= def_start def_scope(B) DOT(C) def_args fin def_body(D). {
              A.a = S->ast_def_spec(B.s, C.s, D.a);
            }

def(A) ::= def_start def_scope(B) DOT(C) def_args fin END. {
              A.a = S->ast_def_spec(B.s, C.s, S->ast_nil());
            }

lit(A) ::= NUM(B).                   { A.a = S->number(B.i); }
lit(A) ::= NIL.                      { A.a = S->ast_nil();  }
lit(A) ::= TRUE.                     { A.a = S->ast_true();  }
lit(A) ::= FALSE.                    { A.a = S->ast_false(); }
lit(A) ::= SELF.                     { A.a = S->self(); }
lit(A) ::= ID(B).                    { A.a = S->named(B.s, B.line); }
lit(A) ::= IVAR(B).                  { A.a = S->ivar_read(B.s); }
lit(A) ::= LITSTR(B).                { A.a = S->lit_str(B.s); }

np_arg(A) ::= lit(B). { A.a = B.a; }

np_arg(A) ::= np_arg(B) OP0(O) np_arg(C).
                { A.a = S->ast_binop(O.s, B.a, C.a); }
np_arg(A) ::= np_arg(B) OP0(O) LP s2(C) RP.
                { A.a = S->ast_binop(O.s, B.a, C.a); }

np_arg(A) ::= np_arg(B) LT(O) np_arg(C).
                { A.a = S->ast_binop(O.s, B.a, C.a); }
np_arg(A) ::= np_arg(B) LT(O) LP s2(C) RP.
                { A.a = S->ast_binop(O.s, B.a, C.a); }

np_arg(A) ::= np_arg(B) OP1(O) np_arg(C).
                { A.a = S->ast_binop(O.s, B.a, C.a); }
np_arg(A) ::= np_arg(B) OP1(O) LP s2(C) RP.
                { A.a = S->ast_binop(O.s, B.a, C.a); }

np_arg(A) ::= np_arg(B) PIPE(O) np_arg(C).
                { A.a = S->ast_binop(O.s, B.a, C.a); }
np_arg(A) ::= np_arg(B) PIPE(O) LP s2(C) RP.
                { A.a = S->ast_binop(O.s, B.a, C.a); }

np_arg(A) ::= np_arg(B) OP2(O) np_arg(C).
                { A.a = S->ast_binop(O.cs, B.a, C.a); }
np_arg(A) ::= np_arg(B) OP2(O) LP s2(C) RP.
                { A.a = S->ast_binop(O.cs, B.a, C.a); }

np_arg(A) ::= np_arg(B) CAST np_arg(C).
                { A.a = S->cast(B.a, C.a); }
np_arg(A) ::= np_arg(B) NEQUAL np_arg(C).
                { A.a = S->not_(S->ast_binop("==", B.a, C.a)); }
np_arg(A) ::= np_arg(B) DOT(C). { A.a = S->call_attr(B.a, C.s); }
np_arg(A) ::= np_arg(B) DOT(C) LP RP. { A.a = S->call(B.a, C.s); }
np_arg(A) ::= np_arg(B) DOT(C) LP np_arg_list RP.
                { A.a = S->call_args(B.a, C.s); }
np_arg(A) ::= ID(B) LP RP. { A.a = S->self_call(B.s); }
np_arg(A) ::= ID(B) LP np_arg_list RP.
                { A.a = S->self_call_args(B.s); }
np_arg(A) ::= np_arg(B) DCOLON(C) ID(D). { A.a = S->dcolon(B.a, C.s, D.s); }

np_arg(A) ::= np_arg(B) DOT_DOLLAR lit(C).
                 { A.a = S->send_indirect(B.a, C.a); }
np_arg(A) ::= np_arg(B) DOT_DOLLAR lit(C) LP RP.
                 { A.a = S->send_indirect(B.a, C.a); }
np_arg(A) ::= np_arg(B) DOT_DOLLAR lit(C) LP np_arg_list RP.
                 { A.a = S->send_indirect_args(B.a, C.a); }
np_arg(A) ::= NOT np_arg(B). { A.a = S->not_(B.a); }
np_arg(A) ::= lambda(B). { A.a = B.a; }
np_arg(A) ::= np_arg(B) LSB np_arg_list RSB.
               { A.a = S->call_args(B.a, "[]"); }

np_arg(A) ::= TUPLE_START np_arg_list RP. { A.a = S->tuple(); }
np_arg(A) ::= LIST np_arg_list RSB. { A.a = S->list(); }
np_arg(A) ::= DICT_START np_arg_list RB. { A.a = S->dict(); }

np_arg_list_start ::= . { S->start_arg_list(); }
np_arg_list_elems ::= np_arg_list_elems comma np_arg(A). { S->add_arg(A.a); }
np_arg_list_elems ::= np_arg(A). { S->add_arg(A.a); }

np_kw_arg ::= ID(A) EQUAL np_arg(B). { S->add_kw_arg(A.s, B.a); }

np_kw_arg_list_elems ::= np_kw_arg_list_elems comma np_kw_arg.
np_kw_arg_list_elems ::= np_kw_arg.

np_opt_kw_arg_list ::= .
np_opt_kw_arg_list ::= comma np_kw_arg_list_elems.

np_arg_list ::= np_arg_list_start np_arg_list_elems np_opt_kw_arg_list.
np_arg_list ::= np_arg_list_start np_kw_arg_list_elems.

np_recv(A) ::= lit(B). { A.a = B.a; }
np_recv(A) ::= ID(C) LP RP. { A.a = S->self_call(C.s); }
np_recv(A) ::= ID(C) LP np_arg_list RP. { A.a = S->self_call_args(C.s); }
np_recv(A) ::= np_recv(B) DOT(C). { A.a = S->call_attr(B.a, C.s); }
np_recv(A) ::= np_recv(B) DOT(C) LP RP. { A.a = S->call(B.a, C.s); }
np_recv(A) ::= np_recv(B) DOT(C) LP np_arg_list RP. { A.a = S->call_args(B.a, C.s); }
np_recv(A) ::= np_recv(B) DCOLON(C) ID(D). { A.a = S->dcolon(B.a, C.s, D.s); }
np_recv(A) ::= np_recv(B) DOT_DOLLAR lit(C).
                 { A.a = S->send_indirect(B.a, C.a); }
np_recv(A) ::= np_recv(B) DOT_DOLLAR lit(C) LP RP.
                 { A.a = S->send_indirect(B.a, C.a); }
np_recv(A) ::= np_recv(B) DOT_DOLLAR lit(C) LP np_arg_list RP.
                 { A.a = S->send_indirect_args(B.a, C.a); }
np_recv(A) ::= lambda(B). { A.a = B.a; }
np_recv(A) ::= TUPLE_START np_arg_list RP. { A.a = S->tuple(); }
np_recv(A) ::= LIST np_arg_list RSB. { A.a = S->list(); }
np_recv(A) ::= DICT_START np_arg_list RB. { A.a = S->dict(); }
np_recv(A) ::= np_recv(B) LSB np_arg_list RSB.
               { A.a = S->call_args(B.a, "[]"); }
np_recv(A) ::= LP s2(B) RP. { A.a = B.a; }

s2(A) ::= np_recv(B) DOT(C) np_arg_list. { A.a = S->call_args(B.a, C.s); }
s2(A) ::= np_recv(B) DOT_DOLLAR lit(C) np_arg_list.
            { A.a = S->send_indirect_args(B.a, C.a); }
s2(A) ::= ID(C) np_arg_list. { A.a = S->self_call_args(C.s); }
s2(A) ::= np_recv(B) CAST np_arg(C).   { A.a = S->cast(B.a, C.a); }
s2(A) ::= np_recv(B) OP0(O) np_arg(C). { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) OP0(O) LP s2(C) RP. { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) LT(O)  np_arg(C). { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) LT(O)  LP s2(C) RP. { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) OP1(O) np_arg(C). { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) OP1(O) LP s2(C) RP. { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) PIPE(O) np_arg(C). { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) PIPE(O) LP s2(C) RP. { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) OP2(O) np_arg(C). { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) OP2(O) LP s2(C) RP. { A.a = S->ast_binop(O.s, B.a, C.a); }
s2(A) ::= np_recv(B) NEQUAL np_arg(C).
                { A.a = S->not_(S->ast_binop("==", B.a, C.a)); }
s2(A) ::= np_recv(B). { A.a = B.a; }
s2(A) ::= NOT s2(B). { A.a = S->not_(B.a); }
s2(A) ::= np_recv(B) AND np_arg(C). { A.a = S->and_(B.a, C.a); }
s2(A) ::= np_recv(B) DOT(C) EQUAL s2(D).
            { A.a = S->call_set_attr(B.a, C.s, D.a); }

stmt(A) ::= s2(B). { A.a = B.a; }

/* Lambda */

lambda_start ::= LB. { S->start_lambda(); }

lambda_args ::= PIPE ID(B) PIPE. { S->def_arg(B.s); }
lambda_args ::= .

lambda(A) ::= lambda_start lambda_args opt_fin delim_seq(B) RB. { A.a = S->lambda(B.a); }

/* Conditions */

cond(A) ::= s2(B). { A.a = B.a; }
cond(A) ::= ID(B) EQUAL s2(C). { A.a = S->assign(B.s, C.a, B.line); }

stmt(A) ::= IF cond(B) fin seq(C) fin END. { A.a = S->if_cond(B.a, C.a); }
stmt(A) ::= IF cond(B) fin seq(C) fin ELSE fin seq(D) fin END.
               { A.a = S->if_else(B.a, C.a, D.a); }

stmt(A) ::= s2(B) IF s2(C). { A.a = S->if_cond(C.a, B.a); }
stmt(A) ::= RETURN s2(B) IF s2(C). { A.a = S->if_cond(C.a, S->ret(B.a)); }
stmt(A) ::= RAISE  s2(B) IF s2(C). { A.a = S->if_cond(C.a, S->raise(B.a)); }
stmt(A) ::= UNLESS cond(B) fin seq(C) fin END. { A.a = S->unless(B.a, C.a); }
stmt(A) ::= WHILE cond(B) fin seq(C) fin END. { A.a = S->while_(B.a, C.a); }

/* Import */

stmt(A) ::= IMPORT DOT_NAME(B). { A.a = S->import(B.s); }
stmt(A) ::= IMPORT DOT_NAME(B) AS ID(C). { A.a = S->import(B.s, C.s); }
stmt(A) ::= IMPORT DOT_NAME(B) DCOLON ID(C). { A.a = S->import_one(B.s, C.s); }
stmt(A) ::= IMPORT DOT_NAME(B) DCOLON ID(C) AS ID(D). { A.a = S->import_one(B.s, C.s, D.s); }

stmt(A) ::= TRY fin seq(C) fin RESCUE fin seq(D) fin END. {
              A.a = S->ast_try(C.a, D.a);
            }

stmt(A) ::= TRY fin seq(C) fin RESCUE ID(D) CAST s2(E) fin seq(F) fin END. {
              A.a = S->ast_try(C.a, D.s, E.a, F.a);
            }

stmt(A) ::= ID(B) EQUAL s2(C). { A.a = S->assign(B.s, C.a, B.line); }
stmt(A) ::= ID(B) OP2_SET(D) s2(C). { A.a = S->assign_op(B.s, D.s, C.a); }
stmt(A) ::= ID(B) OP1_SET(D) s2(C). { A.a = S->assign_op(B.s, D.s, C.a); }
stmt(A) ::= ID(B) OP0_SET(D) s2(C). { A.a = S->assign_op(B.s, D.s, C.a); }
stmt(A) ::= IVAR(B) EQUAL s2(C). { A.a = S->ivar_assign(B.s, C.a); }
stmt(A) ::= IVAR(B) OP2_SET(D) s2(C).
              { A.a = S->ivar_assign_op(B.s, D.s, C.a); }
stmt(A) ::= IVAR(B) OP1_SET(D) s2(C).
              { A.a = S->ivar_assign_op(B.s, D.s, C.a); }
stmt(A) ::= IVAR(B) OP0_SET(D) s2(C).
              { A.a = S->ivar_assign_op(B.s, D.s, C.a); }
stmt(A) ::= RAISE s2(B). { A.a = S->raise(B.a); }
stmt(A) ::= RETURN s2(B). { A.a = S->ret(B.a); }
