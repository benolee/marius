/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#include <assert.h>
#line 2 "vm/parser.lm"

#include "parser_state.hpp"
#include "parser_tokens.h"
#include <iostream>
#line 14 "vm/parser.c.inc"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    mariusParserTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is mariusParserTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    mariusParserARG_SDECL     A static variable declaration for the %extra_argument
**    mariusParserARG_PDECL     A parameter declaration for the %extra_argument
**    mariusParserARG_STORE     Code to store %extra_argument into yypParser
**    mariusParserARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 93
#define YYACTIONTYPE unsigned short int
#define mariusParserTOKENTYPE  marius::ParserToken 
typedef union {
  int yyinit;
  mariusParserTOKENTYPE yy0;
  marius::ParserToken yy80;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define mariusParserARG_SDECL  marius::ParserState* S ;
#define mariusParserARG_PDECL , marius::ParserState* S 
#define mariusParserARG_FETCH  marius::ParserState* S  = yypParser->S 
#define mariusParserARG_STORE yypParser->S  = S 
#define YYNSTATE 302
#define YYNRULE 144
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (1569)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    51,  273,  139,  302,  266,  296,  295,  294,   81,  292,
 /*    10 */   126,   76,  290,  288,   52,  296,  295,  281,  280,  279,
 /*    20 */   278,  277,  146,  274,   99,  110,  109,  108,   72,  106,
 /*    30 */   262,   39,  154,   38,   37,  164,   51,   27,   89,  204,
 /*    40 */    28,  296,  295,   36,   35,  292,  291,   76,  290,  288,
 /*    50 */    52,  296,  295,  281,  280,  279,  278,  277,  146,  274,
 /*    60 */   208,  110,  109,  108,   71,  105,  262,   39,  271,   38,
 /*    70 */    37,  164,   51,  183,   89,   26,  270,  296,  295,   36,
 /*    80 */    35,  292,  289,   76,  290,  288,   52,  104,  267,  281,
 /*    90 */   280,  279,  278,  277,  146,  274,  268,  110,  109,  108,
 /*   100 */   265,  264,  262,   39,  263,   38,   37,  164,   51,   16,
 /*   110 */    89,  178,  121,  296,  295,   36,   35,  292,  260,   76,
 /*   120 */   290,  288,   52,  261,  257,  281,  280,  279,  278,  277,
 /*   130 */   146,  274,  253,  110,  109,  108,  249,  251,  262,   39,
 /*   140 */   246,   38,   37,  164,   51,  182,   89,   26,  247,  296,
 /*   150 */   295,   36,   35,  244,  228,   76,  245,  181,   52,   26,
 /*   160 */   242,  281,  280,  279,  278,  277,  146,  274,  241,  110,
 /*   170 */   109,  108,  240,  239,  262,   39,   95,   38,   37,  164,
 /*   180 */    51,  180,   89,   26,  238,  296,  295,   36,   35,  162,
 /*   190 */   227,   76,  163,  174,   52,   26,  224,  281,  280,  279,
 /*   200 */   278,  277,  146,  274,   34,  110,  109,  108,  216,  217,
 /*   210 */   262,   39,  215,   38,   37,  164,   51,  173,   89,   26,
 /*   220 */   214,  296,  295,   36,   35,  213,  226,   76,  212,  172,
 /*   230 */    52,   26,  211,  281,  280,  279,  278,  277,  146,  274,
 /*   240 */   206,  110,  109,  108,  102,  103,  262,   39,   84,   38,
 /*   250 */    37,  164,   51,  171,   89,   26,  107,  296,  295,   36,
 /*   260 */    35,  124,  225,   76,   75,  203,   52,  120,  179,  281,
 /*   270 */   280,  279,  278,  277,  146,  274,  154,  110,  109,  108,
 /*   280 */   210,  205,  262,   39,  153,   38,   37,  164,   51,  152,
 /*   290 */    89,   26,  191,  296,  295,   36,   35,  296,  295,   76,
 /*   300 */   293,  185,   52,  161,  122,  281,  280,  279,  278,  277,
 /*   310 */   146,  274,  127,  110,  109,  108,  207,   77,  262,   39,
 /*   320 */   151,   38,   37,  164,   51,  272,   89,   80,  269,  296,
 /*   330 */   295,   36,   35,  258,  223,   76,  252,  187,   52,   26,
 /*   340 */   448,  281,  280,  279,  278,  277,  146,  274,  448,  110,
 /*   350 */   109,  108,  448,  448,  262,   39,  448,   38,   37,  164,
 /*   360 */    51,  184,   89,   26,  448,  296,  295,   36,   35,  448,
 /*   370 */   219,   76,  448,  177,   52,   26,  448,  281,  280,  279,
 /*   380 */   278,  277,  146,  274,  448,  110,  109,  108,  448,  448,
 /*   390 */   262,   39,  448,   38,   37,  164,   51,  175,   89,   26,
 /*   400 */   448,  296,  295,   36,   35,    5,  202,   76,  448,  448,
 /*   410 */    52,  260,  448,  281,  280,  279,  278,  277,  146,  274,
 /*   420 */   448,  110,  109,  108,  448,  448,  262,   39,  448,   38,
 /*   430 */    37,  164,   51,  448,   89,    2,  448,  296,  295,   36,
 /*   440 */    35,  260,  200,   76,  448,  256,   52,   26,  448,  281,
 /*   450 */   280,  279,  278,  277,  146,  274,  448,  110,  109,  108,
 /*   460 */    51,  448,  262,   39,  448,   38,   37,  164,  448,  292,
 /*   470 */    89,   76,  290,  288,   52,   36,   35,  281,  280,  279,
 /*   480 */   278,  277,  146,  274,  448,  110,  109,  108,  448,  448,
 /*   490 */   262,   39,  448,   38,   37,  164,   51,  218,   89,    4,
 /*   500 */    25,  296,  295,   36,   35,  260,  260,   76,  448,  448,
 /*   510 */    52,  448,  448,  281,  280,  279,  278,  277,  146,  274,
 /*   520 */   448,  110,  109,  108,   51,  448,  262,   39,  448,   38,
 /*   530 */    37,  164,  448,  448,   89,   76,  448,  448,   52,   36,
 /*   540 */    35,  281,  280,  279,  278,  277,  146,  274,  448,  110,
 /*   550 */   109,  108,  379,  448,  262,   39,  448,   38,   37,  164,
 /*   560 */   448,  448,   89,  379,  448,  448,  103,   36,   35,  379,
 /*   570 */   379,  379,  379,  379,  379,  379,  448,  379,  379,  379,
 /*   580 */   448,   54,  379,  448,   62,   61,   60,  448,  188,  186,
 /*   590 */   118,  115,   46,   45,   44,  448,  100,  448,  448,  199,
 /*   600 */   300,  299,  298,  297,  293,  254,   43,   26,  193,  197,
 /*   610 */   229,  192,  448,  119,  194,    6,  128,   42,   41,   40,
 /*   620 */   255,  260,   15,  248,  296,  295,  195,   98,  260,  126,
 /*   630 */   199,  300,  299,  298,  297,  293,  250,  448,   26,  193,
 /*   640 */   237,  229,  192,  198,  119,  448,  128,  128,  448,   17,
 /*   650 */   255,  255,  448,  248,  248,  260,  448,  448,  100,  126,
 /*   660 */   126,  199,  300,  299,  298,  297,  293,  448,   14,  448,
 /*   670 */   193,  196,  229,  192,  260,  119,  379,  448,  128,  149,
 /*   680 */   448,  448,  255,  255,  448,  248,  248,  379,  448,  448,
 /*   690 */   103,  126,  126,  379,  379,  379,  379,  379,  379,  379,
 /*   700 */   379,  379,  379,  379,  448,   60,  379,  188,  186,  118,
 /*   710 */   115,  379,  448,  448,  106,  448,  448,  379,  379,  379,
 /*   720 */   379,  379,  379,  379,  379,  379,  379,  379,  448,  448,
 /*   730 */   379,  190,  176,  116,  111,  379,  448,  448,  102,  448,
 /*   740 */   448,  379,  379,  379,  379,  379,  379,  379,   68,  379,
 /*   750 */   379,  379,  448,  448,  379,  188,  186,  118,  115,  276,
 /*   760 */   448,  448,   29,  448,  448,  281,  280,  279,  278,  277,
 /*   770 */   275,  274,   68,  114,  113,  112,  273,  141,  262,  266,
 /*   780 */   448,   24,   13,  276,  448,  126,   30,  260,  260,  281,
 /*   790 */   280,  279,  278,  277,  275,  274,   68,  114,  113,  112,
 /*   800 */   273,  140,  262,  266,  448,   23,   12,  276,  448,  126,
 /*   810 */    31,  260,  260,  281,  280,  279,  278,  277,  275,  274,
 /*   820 */    68,  114,  113,  112,  273,  147,  262,  266,  448,   22,
 /*   830 */    11,  276,  448,  126,   32,  260,  260,  281,  280,  279,
 /*   840 */   278,  277,  275,  274,   68,  114,  113,  112,  273,  138,
 /*   850 */   262,  266,  448,   21,   20,  276,  448,  126,   33,  260,
 /*   860 */   260,  281,  280,  279,  278,  277,  275,  274,   68,  114,
 /*   870 */   113,  112,  273,  132,  262,  266,  448,    9,   19,  276,
 /*   880 */   448,  126,   53,  260,  260,  281,  280,  279,  278,  277,
 /*   890 */   275,  274,   68,  114,  113,  112,  273,  131,  262,  266,
 /*   900 */   448,    8,   18,  276,  448,  126,   50,  260,  260,  281,
 /*   910 */   280,  279,  278,  277,  275,  274,   68,  114,  113,  112,
 /*   920 */   273,  143,  262,  266,  448,    1,    3,  276,  448,  126,
 /*   930 */    49,  260,  260,  281,  280,  279,  278,  277,  275,  274,
 /*   940 */    68,  114,  113,  112,  273,  142,  262,  266,  448,   10,
 /*   950 */   448,  276,  448,  126,   48,  260,  448,  281,  280,  279,
 /*   960 */   278,  277,  275,  274,   68,  114,  113,  112,  273,  145,
 /*   970 */   262,  266,  448,  448,  448,  276,  448,  126,   47,  448,
 /*   980 */   448,  281,  280,  279,  278,  277,  275,  274,   51,  114,
 /*   990 */   113,  112,  273,  144,  262,  266,  448,  448,  448,   79,
 /*  1000 */   448,  126,   52,  448,  448,  281,  280,  279,  278,  277,
 /*  1010 */   275,  274,  448,  110,  109,  108,   73,  448,  262,  199,
 /*  1020 */   300,  299,  298,  297,  448,  448,  448,  448,  193,  169,
 /*  1030 */   229,  192,  448,  119,  448,  128,  128,  447,    7,  255,
 /*  1040 */   255,  121,  248,  248,  448,  448,  448,  260,  126,  126,
 /*  1050 */   301,  300,  299,  298,  297,  293,  448,  448,  448,  193,
 /*  1060 */   170,  229,  192,  448,  119,  448,  128,  128,  448,  448,
 /*  1070 */   255,  255,  448,  248,  248,  150,  448,  448,   52,  126,
 /*  1080 */   126,  281,  280,  279,  278,  277,  275,  274,   68,  110,
 /*  1090 */   109,  108,  448,  448,  262,  273,  130,  448,  266,  276,
 /*  1100 */   101,  209,  123,  448,  126,  281,  280,  279,  278,  277,
 /*  1110 */   275,  274,  448,  114,  113,  112,   68,  448,  262,  448,
 /*  1120 */   448,  448,  273,  129,  448,  266,  448,  189,  209,  125,
 /*  1130 */   448,  126,  448,  281,  280,  279,  278,  277,  275,  274,
 /*  1140 */   448,  114,  113,  112,  448,  448,  262,  448,   65,   59,
 /*  1150 */    58,   67,   66,   57,   56,   55,  448,   78,  176,  117,
 /*  1160 */   111,   64,   63,   70,   69,   62,   61,   60,  448,  188,
 /*  1170 */   186,  118,  115,  220,  293,  448,   83,  448,  448,  243,
 /*  1180 */   229,  448,  448,  448,  201,  128,  128,  448,  448,  255,
 /*  1190 */   255,  448,  248,  248,  276,  448,  448,  448,  126,  126,
 /*  1200 */   281,  280,  279,  278,  277,  275,  274,  220,  448,  448,
 /*  1210 */    74,  160,  448,  448,  229,  220,  293,  448,   96,  448,
 /*  1220 */   128,  448,  229,  448,  255,  448,  448,  248,  128,  448,
 /*  1230 */   448,  448,  255,  126,  448,  248,  220,  293,  448,   94,
 /*  1240 */   448,  126,  448,  229,  448,  448,  448,  448,  448,  128,
 /*  1250 */   448,  220,  293,  255,   92,  448,  248,  448,  229,  448,
 /*  1260 */   448,  448,  126,  448,  128,  448,  220,  293,  255,   90,
 /*  1270 */   448,  248,  448,  229,  448,  448,  448,  126,  448,  128,
 /*  1280 */   448,  220,  293,  255,   88,  448,  248,  168,  229,  448,
 /*  1290 */   448,  448,  126,  128,  128,  448,  448,  255,  255,  448,
 /*  1300 */   248,  248,  220,  293,  448,   87,  126,  126,  448,  229,
 /*  1310 */   448,  448,  448,  448,  448,  128,  448,  220,  293,  255,
 /*  1320 */    85,  448,  248,  448,  229,  448,  448,  448,  126,  448,
 /*  1330 */   128,  259,  293,  448,  255,  286,  285,  248,  229,  284,
 /*  1340 */   448,  283,  448,  126,  128,  448,  448,  448,  255,  167,
 /*  1350 */   448,  248,  448,  287,  166,  128,  448,  126,  282,  255,
 /*  1360 */   128,  448,  248,  448,  255,  165,  236,  248,  126,  448,
 /*  1370 */   448,  128,  128,  126,  448,  255,  255,  235,  248,  248,
 /*  1380 */   448,  448,  448,  128,  126,  126,  448,  255,  448,  234,
 /*  1390 */   248,  233,  448,  448,  448,  128,  126,  128,  448,  255,
 /*  1400 */   448,  255,  248,  232,  248,  448,  448,  448,  126,  128,
 /*  1410 */   126,  231,  448,  255,  448,  448,  248,  128,  448,  448,
 /*  1420 */   448,  255,  126,  230,  248,   97,  448,  448,  448,  128,
 /*  1430 */   126,  128,  448,  255,  448,  255,  248,   93,  248,   91,
 /*  1440 */   448,  448,  126,  128,  126,  128,  448,  255,  448,  255,
 /*  1450 */   248,  222,  248,  448,  448,  448,  126,  128,  126,  221,
 /*  1460 */   448,  255,  448,  448,  248,  128,  448,   86,  448,  255,
 /*  1470 */   126,  448,  248,  128,  448,  159,  448,  255,  126,  448,
 /*  1480 */   248,  128,  448,  158,  448,  255,  126,  448,  248,  128,
 /*  1490 */   448,  448,  448,  255,  126,  157,  248,  156,  448,  448,
 /*  1500 */   448,  128,  126,  128,  448,  255,  448,  255,  248,  155,
 /*  1510 */   248,   82,  448,  448,  126,  128,  126,  128,  448,  255,
 /*  1520 */   448,  255,  248,  448,  248,  448,  273,  148,  126,  266,
 /*  1530 */   126,  273,  137,  448,  266,  126,  448,  448,  273,  136,
 /*  1540 */   126,  266,  448,  273,  135,  448,  266,  126,  448,  448,
 /*  1550 */   448,  448,  126,  448,  273,  134,  448,  266,  448,  273,
 /*  1560 */   133,  448,  266,  126,  448,  448,  448,  448,  126,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     9,   81,   82,    0,   84,   14,   15,   16,   20,   18,
 /*    10 */    90,   20,   21,   22,   23,   14,   15,   26,   27,   28,
 /*    20 */    29,   30,   31,   32,   20,   34,   35,   36,    4,   23,
 /*    30 */    39,   40,   17,   42,   43,   44,    9,   66,   47,   24,
 /*    40 */     3,   14,   15,   52,   53,   18,   19,   20,   21,   22,
 /*    50 */    23,   14,   15,   26,   27,   28,   29,   30,   31,   32,
 /*    60 */    89,   34,   35,   36,   38,   23,   39,   40,   24,   42,
 /*    70 */    43,   44,    9,   83,   47,   85,   20,   14,   15,   52,
 /*    80 */    53,   18,   19,   20,   21,   22,   23,   23,   33,   26,
 /*    90 */    27,   28,   29,   30,   31,   32,   24,   34,   35,   36,
 /*   100 */    24,   33,   39,   40,   37,   42,   43,   44,    9,   56,
 /*   110 */    47,   20,   59,   14,   15,   52,   53,   18,   65,   20,
 /*   120 */    21,   22,   23,    7,   24,   26,   27,   28,   29,   30,
 /*   130 */    31,   32,   20,   34,   35,   36,   33,   24,   39,   40,
 /*   140 */    33,   42,   43,   44,    9,   83,   47,   85,   24,   14,
 /*   150 */    15,   52,   53,   24,   19,   20,   37,   83,   23,   85,
 /*   160 */    24,   26,   27,   28,   29,   30,   31,   32,   24,   34,
 /*   170 */    35,   36,   24,   24,   39,   40,   41,   42,   43,   44,
 /*   180 */     9,   83,   47,   85,   24,   14,   15,   52,   53,   46,
 /*   190 */    19,   20,   45,   83,   23,   85,   20,   26,   27,   28,
 /*   200 */    29,   30,   31,   32,    4,   34,   35,   36,   24,   37,
 /*   210 */    39,   40,   24,   42,   43,   44,    9,   83,   47,   85,
 /*   220 */    24,   14,   15,   52,   53,   24,   19,   20,   24,   83,
 /*   230 */    23,   85,   14,   26,   27,   28,   29,   30,   31,   32,
 /*   240 */    24,   34,   35,   36,   23,   23,   39,   40,   79,   42,
 /*   250 */    43,   44,    9,   83,   47,   85,   23,   14,   15,   52,
 /*   260 */    53,   66,   19,   20,   91,   76,   23,   78,    7,   26,
 /*   270 */    27,   28,   29,   30,   31,   32,   17,   34,   35,   36,
 /*   280 */    87,   76,   39,   40,   20,   42,   43,   44,    9,   83,
 /*   290 */    47,   85,   20,   14,   15,   52,   53,   14,   15,   20,
 /*   300 */    65,   81,   23,   20,   66,   26,   27,   28,   29,   30,
 /*   310 */    31,   32,   80,   34,   35,   36,   24,   81,   39,   40,
 /*   320 */    81,   42,   43,   44,    9,   24,   47,   48,   24,   14,
 /*   330 */    15,   52,   53,   24,   19,   20,   24,   83,   23,   85,
 /*   340 */    92,   26,   27,   28,   29,   30,   31,   32,   92,   34,
 /*   350 */    35,   36,   92,   92,   39,   40,   92,   42,   43,   44,
 /*   360 */     9,   83,   47,   85,   92,   14,   15,   52,   53,   92,
 /*   370 */    19,   20,   92,   83,   23,   85,   92,   26,   27,   28,
 /*   380 */    29,   30,   31,   32,   92,   34,   35,   36,   92,   92,
 /*   390 */    39,   40,   92,   42,   43,   44,    9,   83,   47,   85,
 /*   400 */    92,   14,   15,   52,   53,   59,   19,   20,   92,   92,
 /*   410 */    23,   65,   92,   26,   27,   28,   29,   30,   31,   32,
 /*   420 */    92,   34,   35,   36,   92,   92,   39,   40,   92,   42,
 /*   430 */    43,   44,    9,   92,   47,   59,   92,   14,   15,   52,
 /*   440 */    53,   65,   19,   20,   92,   83,   23,   85,   92,   26,
 /*   450 */    27,   28,   29,   30,   31,   32,   92,   34,   35,   36,
 /*   460 */     9,   92,   39,   40,   92,   42,   43,   44,   92,   18,
 /*   470 */    47,   20,   21,   22,   23,   52,   53,   26,   27,   28,
 /*   480 */    29,   30,   31,   32,   92,   34,   35,   36,   92,   92,
 /*   490 */    39,   40,   92,   42,   43,   44,    9,   56,   47,   59,
 /*   500 */    59,   14,   15,   52,   53,   65,   65,   20,   92,   92,
 /*   510 */    23,   92,   92,   26,   27,   28,   29,   30,   31,   32,
 /*   520 */    92,   34,   35,   36,    9,   92,   39,   40,   92,   42,
 /*   530 */    43,   44,   92,   92,   47,   20,   92,   92,   23,   52,
 /*   540 */    53,   26,   27,   28,   29,   30,   31,   32,   92,   34,
 /*   550 */    35,   36,    9,   92,   39,   40,   92,   42,   43,   44,
 /*   560 */    92,   92,   47,   20,   92,   92,   23,   52,   53,   26,
 /*   570 */    27,   28,   29,   30,   31,   32,   92,   34,   35,   36,
 /*   580 */    92,   38,   39,   92,    6,    7,    8,   92,   10,   11,
 /*   590 */    12,   13,   49,   50,   51,   92,   57,   92,   92,   60,
 /*   600 */    61,   62,   63,   64,   65,   83,   38,   85,   69,   70,
 /*   610 */    71,   72,   92,   74,   58,   59,   77,   49,   50,   51,
 /*   620 */    81,   65,   59,   84,   14,   15,   16,   57,   65,   90,
 /*   630 */    60,   61,   62,   63,   64,   65,   83,   92,   85,   69,
 /*   640 */    71,   71,   72,   73,   74,   92,   77,   77,   92,   59,
 /*   650 */    81,   81,   92,   84,   84,   65,   92,   92,   57,   90,
 /*   660 */    90,   60,   61,   62,   63,   64,   65,   92,   59,   92,
 /*   670 */    69,   70,   71,   72,   65,   74,    9,   92,   77,   77,
 /*   680 */    92,   92,   81,   81,   92,   84,   84,   20,   92,   92,
 /*   690 */    23,   90,   90,   26,   27,   28,   29,   30,   31,   32,
 /*   700 */     9,   34,   35,   36,   92,    8,   39,   10,   11,   12,
 /*   710 */    13,   20,   92,   92,   23,   92,   92,   26,   27,   28,
 /*   720 */    29,   30,   31,   32,    9,   34,   35,   36,   92,   92,
 /*   730 */    39,   10,   11,   12,   13,   20,   92,   92,   23,   92,
 /*   740 */    92,   26,   27,   28,   29,   30,   31,   32,    9,   34,
 /*   750 */    35,   36,   92,   92,   39,   10,   11,   12,   13,   20,
 /*   760 */    92,   92,   23,   92,   92,   26,   27,   28,   29,   30,
 /*   770 */    31,   32,    9,   34,   35,   36,   81,   82,   39,   84,
 /*   780 */    92,   59,   59,   20,   92,   90,   23,   65,   65,   26,
 /*   790 */    27,   28,   29,   30,   31,   32,    9,   34,   35,   36,
 /*   800 */    81,   82,   39,   84,   92,   59,   59,   20,   92,   90,
 /*   810 */    23,   65,   65,   26,   27,   28,   29,   30,   31,   32,
 /*   820 */     9,   34,   35,   36,   81,   82,   39,   84,   92,   59,
 /*   830 */    59,   20,   92,   90,   23,   65,   65,   26,   27,   28,
 /*   840 */    29,   30,   31,   32,    9,   34,   35,   36,   81,   82,
 /*   850 */    39,   84,   92,   59,   59,   20,   92,   90,   23,   65,
 /*   860 */    65,   26,   27,   28,   29,   30,   31,   32,    9,   34,
 /*   870 */    35,   36,   81,   82,   39,   84,   92,   59,   59,   20,
 /*   880 */    92,   90,   23,   65,   65,   26,   27,   28,   29,   30,
 /*   890 */    31,   32,    9,   34,   35,   36,   81,   82,   39,   84,
 /*   900 */    92,   59,   59,   20,   92,   90,   23,   65,   65,   26,
 /*   910 */    27,   28,   29,   30,   31,   32,    9,   34,   35,   36,
 /*   920 */    81,   82,   39,   84,   92,   59,   59,   20,   92,   90,
 /*   930 */    23,   65,   65,   26,   27,   28,   29,   30,   31,   32,
 /*   940 */     9,   34,   35,   36,   81,   82,   39,   84,   92,   59,
 /*   950 */    92,   20,   92,   90,   23,   65,   92,   26,   27,   28,
 /*   960 */    29,   30,   31,   32,    9,   34,   35,   36,   81,   82,
 /*   970 */    39,   84,   92,   92,   92,   20,   92,   90,   23,   92,
 /*   980 */    92,   26,   27,   28,   29,   30,   31,   32,    9,   34,
 /*   990 */    35,   36,   81,   82,   39,   84,   92,   92,   92,   20,
 /*  1000 */    92,   90,   23,   92,   92,   26,   27,   28,   29,   30,
 /*  1010 */    31,   32,   92,   34,   35,   36,   57,   92,   39,   60,
 /*  1020 */    61,   62,   63,   64,   92,   92,   92,   92,   69,   71,
 /*  1030 */    71,   72,   92,   74,   92,   77,   77,   55,   56,   81,
 /*  1040 */    81,   59,   84,   84,   92,   92,   92,   65,   90,   90,
 /*  1050 */    60,   61,   62,   63,   64,   65,   92,   92,   92,   69,
 /*  1060 */    71,   71,   72,   92,   74,   92,   77,   77,   92,   92,
 /*  1070 */    81,   81,   92,   84,   84,   20,   92,   92,   23,   90,
 /*  1080 */    90,   26,   27,   28,   29,   30,   31,   32,    9,   34,
 /*  1090 */    35,   36,   92,   92,   39,   81,   82,   92,   84,   20,
 /*  1100 */    86,   87,   88,   92,   90,   26,   27,   28,   29,   30,
 /*  1110 */    31,   32,   92,   34,   35,   36,    9,   92,   39,   92,
 /*  1120 */    92,   92,   81,   82,   92,   84,   92,   20,   87,   88,
 /*  1130 */    92,   90,   92,   26,   27,   28,   29,   30,   31,   32,
 /*  1140 */    92,   34,   35,   36,   92,   92,   39,   92,    1,    2,
 /*  1150 */     3,    4,    5,    6,    7,    8,   92,   10,   11,   12,
 /*  1160 */    13,    2,    3,    4,    5,    6,    7,    8,   92,   10,
 /*  1170 */    11,   12,   13,   64,   65,   92,   67,   92,   92,   71,
 /*  1180 */    71,   92,   92,   92,   75,   77,   77,   92,   92,   81,
 /*  1190 */    81,   92,   84,   84,   20,   92,   92,   92,   90,   90,
 /*  1200 */    26,   27,   28,   29,   30,   31,   32,   64,   92,   92,
 /*  1210 */    67,   68,   92,   92,   71,   64,   65,   92,   67,   92,
 /*  1220 */    77,   92,   71,   92,   81,   92,   92,   84,   77,   92,
 /*  1230 */    92,   92,   81,   90,   92,   84,   64,   65,   92,   67,
 /*  1240 */    92,   90,   92,   71,   92,   92,   92,   92,   92,   77,
 /*  1250 */    92,   64,   65,   81,   67,   92,   84,   92,   71,   92,
 /*  1260 */    92,   92,   90,   92,   77,   92,   64,   65,   81,   67,
 /*  1270 */    92,   84,   92,   71,   92,   92,   92,   90,   92,   77,
 /*  1280 */    92,   64,   65,   81,   67,   92,   84,   71,   71,   92,
 /*  1290 */    92,   92,   90,   77,   77,   92,   92,   81,   81,   92,
 /*  1300 */    84,   84,   64,   65,   92,   67,   90,   90,   92,   71,
 /*  1310 */    92,   92,   92,   92,   92,   77,   92,   64,   65,   81,
 /*  1320 */    67,   92,   84,   92,   71,   92,   92,   92,   90,   92,
 /*  1330 */    77,   64,   65,   92,   81,    2,    3,   84,   71,    6,
 /*  1340 */    92,    8,   92,   90,   77,   92,   92,   92,   81,   71,
 /*  1350 */    92,   84,   92,   20,   71,   77,   92,   90,   25,   81,
 /*  1360 */    77,   92,   84,   92,   81,   71,   71,   84,   90,   92,
 /*  1370 */    92,   77,   77,   90,   92,   81,   81,   71,   84,   84,
 /*  1380 */    92,   92,   92,   77,   90,   90,   92,   81,   92,   71,
 /*  1390 */    84,   71,   92,   92,   92,   77,   90,   77,   92,   81,
 /*  1400 */    92,   81,   84,   71,   84,   92,   92,   92,   90,   77,
 /*  1410 */    90,   71,   92,   81,   92,   92,   84,   77,   92,   92,
 /*  1420 */    92,   81,   90,   71,   84,   71,   92,   92,   92,   77,
 /*  1430 */    90,   77,   92,   81,   92,   81,   84,   71,   84,   71,
 /*  1440 */    92,   92,   90,   77,   90,   77,   92,   81,   92,   81,
 /*  1450 */    84,   71,   84,   92,   92,   92,   90,   77,   90,   71,
 /*  1460 */    92,   81,   92,   92,   84,   77,   92,   71,   92,   81,
 /*  1470 */    90,   92,   84,   77,   92,   71,   92,   81,   90,   92,
 /*  1480 */    84,   77,   92,   71,   92,   81,   90,   92,   84,   77,
 /*  1490 */    92,   92,   92,   81,   90,   71,   84,   71,   92,   92,
 /*  1500 */    92,   77,   90,   77,   92,   81,   92,   81,   84,   71,
 /*  1510 */    84,   71,   92,   92,   90,   77,   90,   77,   92,   81,
 /*  1520 */    92,   81,   84,   92,   84,   92,   81,   82,   90,   84,
 /*  1530 */    90,   81,   82,   92,   84,   90,   92,   92,   81,   82,
 /*  1540 */    90,   84,   92,   81,   82,   92,   84,   90,   92,   92,
 /*  1550 */    92,   92,   90,   92,   81,   82,   92,   84,   92,   81,
 /*  1560 */    82,   92,   84,   90,   92,   92,   92,   92,   90,
};
#define YY_SHIFT_USE_DFLT (-13)
#define YY_SHIFT_COUNT (194)
#define YY_SHIFT_MIN   (-12)
#define YY_SHIFT_MAX   (1333)
static const short yy_shift_ofst[] = {
 /*     0 */     1,   99,   99,   99,   63,   27,   -9,  451,  423,  487,
 /*    10 */   487,  487,  487,  487,  487,  487,  515,  135,  387,  351,
 /*    20 */   315,  279,  243,  207,  171,  487, 1107, 1107,  979,  979,
 /*    30 */   979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
 /*    40 */   979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
 /*    50 */   979,  979,  979,  979,  979,  955,  931,  907,  883,  859,
 /*    60 */   835,  811,  787,  763,  739, 1079, 1079, 1079, 1079, 1079,
 /*    70 */  1079, 1079, 1055,  610,    1,    1,  543,  715,  691,  667,
 /*    80 */   283,   37,    1,    1,    1,    1,    1,    1,    1,    1,
 /*    90 */     1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 /*   100 */     1,  259,  312,  309,  304,  301,  292,  272,  -13,  -13,
 /*   110 */   -13,  -13,  -13,  -13,  -13,  -13, 1174, 1174, 1174, 1333,
 /*   120 */    15,    1,  272,  259,  264,  259,  261,  233, 1147, 1159,
 /*   130 */  1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
 /*   140 */   578,  578,  578,  578,  697,  697,  568,  745,  745,  721,
 /*   150 */   222,  221,  216,   26,  218,  204,  201,  196,  188,  184,
 /*   160 */   172,  200,  176,  143,  147,  160,  149,  148,  144,  136,
 /*   170 */   129,  119,  107,  124,  103,  113,  112,  100,  116,   91,
 /*   180 */    67,   68,   76,   55,   72,   64,   56,   44,   42,   26,
 /*   190 */     6,   24,    4,  -12,    3,
};
#define YY_REDUCE_USE_DFLT (-81)
#define YY_REDUCE_COUNT (127)
#define YY_REDUCE_MIN   (-80)
#define YY_REDUCE_MAX   (1478)
static const short yy_reduce_ofst[] = {
 /*     0 */   982,  601,  570,  539,  990,  990,  990,  959, 1109, 1253,
 /*    10 */  1238, 1217, 1202, 1187, 1172, 1151, 1143, 1267, 1267, 1267,
 /*    20 */  1267, 1267, 1267, 1267, 1267, 1267, 1014, 1041, 1440, 1438,
 /*    30 */  1426, 1424, 1412, 1404, 1396, 1388, 1380, 1368, 1366, 1354,
 /*    40 */  1352, 1340, 1332, 1320, 1318, 1306, 1295, 1294, 1283, 1278,
 /*    50 */  1216, 1108,  989,  958,  569, 1478, 1473, 1462, 1457, 1450,
 /*    60 */  1445,  911,  887,  863,  839,  815,  791,  767,  743,  719,
 /*    70 */   695,  -80,  602,  556,  441,   53,  362,  553,  522,  362,
 /*    80 */   890,  867,  866,  843,  842,  819,  818,  795,  794,  771,
 /*    90 */   770,  747,  746,  723,  722,  609,  590,  563,  440,  376,
 /*   100 */   346,  -29,  314,  290,  278,  254,  206,  189,  170,  146,
 /*   110 */   134,  110,   98,   74,   62,  -10,  239,  236,  220,  232,
 /*   120 */   238,  235,  205,  195,  193,  195,  173,  169,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   311,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    10 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    20 */   446,  446,  446,  446,  446,  312,  446,  446,  446,  446,
 /*    30 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    40 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    50 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    60 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    70 */   446,  446,  446,  446,  311,  311,  350,  396,  392,  350,
 /*    80 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*    90 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*   100 */   446,  385,  379,  379,  379,  379,  379,  446,  379,  379,
 /*   110 */   379,  379,  379,  379,  379,  379,  446,  446,  446,  446,
 /*   120 */   446,  312,  446,  388,  446,  386,  426,  335,  420,  380,
 /*   130 */   381,  422,  419,  417,  415,  413,  411,  409,  408,  382,
 /*   140 */   365,  364,  356,  354,  360,  358,  351,  373,  362,  332,
 /*   150 */   350,  396,  446,  446,  318,  446,  446,  446,  446,  446,
 /*   160 */   446,  446,  446,  432,  446,  446,  446,  446,  446,  446,
 /*   170 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*   180 */   446,  446,  446,  446,  446,  370,  446,  446,  366,  350,
 /*   190 */   392,  331,  446,  446,  446,  313,  325,  324,  328,  304,
 /*   200 */   344,  343,  330,  334,  336,  333,  394,  393,  387,  384,
 /*   210 */   383,  317,  355,  357,  359,  361,  363,  427,  321,  435,
 /*   220 */   320,  445,  444,  434,  433,  431,  430,  429,  428,  423,
 /*   230 */   443,  442,  441,  440,  439,  438,  437,  436,  418,  416,
 /*   240 */   414,  412,  410,  421,  404,  402,  401,  400,  399,  403,
 /*   250 */   406,  398,  397,  395,  405,  389,  407,  391,  390,  319,
 /*   260 */   316,  425,  424,  378,  377,  376,  374,  375,  372,  371,
 /*   270 */   369,  368,  367,  353,  352,  351,  350,  349,  348,  347,
 /*   280 */   346,  345,  342,  341,  340,  339,  338,  337,  329,  327,
 /*   290 */   326,  323,  322,  315,  314,  310,  309,  308,  307,  306,
 /*   300 */   305,  303,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  mariusParserARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void mariusParserTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "AND",           "OP0",           "LT",          
  "CAST",          "NEQUAL",        "OP1",           "PIPE",        
  "OP2",           "NOT",           "DOT",           "DCOLON",      
  "DOT_DOLLAR",    "LSB",           "NL",            "SEMI",        
  "EOF",           "COMMA",         "CLASS",         "END",         
  "ID",            "TRAIT",         "DEF",           "LP",          
  "RP",            "SQUARE",        "NUM",           "NIL",         
  "TRUE",          "FALSE",         "SELF",          "IVAR",        
  "LITSTR",        "RSB",           "TUPLE_START",   "LIST",        
  "DICT_START",    "RB",            "EQUAL",         "LB",          
  "IF",            "ELSE",          "UNLESS",        "WHILE",       
  "IMPORT",        "DOT_NAME",      "AS",            "TRY",         
  "RESCUE",        "OP2_SET",       "OP1_SET",       "OP0_SET",     
  "RAISE",         "RETURN",        "error",         "program",     
  "opt_fin",       "l1",            "last_fin",      "fin",         
  "l1e",           "class",         "trait",         "def",         
  "stmt",          "fin_m",         "comma",         "seq",         
  "delim_seq",     "class_start",   "class_body",    "s2",          
  "trait_start",   "trait_body",    "def_start",     "def_body",    
  "arg",           "np_recv",       "id_list",       "def_args",    
  "def_name",      "lit",           "np_arg",        "np_arg_list", 
  "lambda",        "np_arg_list_start",  "np_arg_list_elems",  "np_kw_arg",   
  "np_kw_arg_list_elems",  "np_opt_kw_arg_list",  "lambda_start",  "lambda_args", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= opt_fin l1 last_fin",
 /*   1 */ "l1 ::= l1 fin l1e",
 /*   2 */ "l1 ::= l1e",
 /*   3 */ "l1e ::= class",
 /*   4 */ "l1e ::= trait",
 /*   5 */ "l1e ::= def",
 /*   6 */ "l1e ::= stmt",
 /*   7 */ "fin_m ::= NL",
 /*   8 */ "fin_m ::= SEMI",
 /*   9 */ "opt_fin ::=",
 /*  10 */ "opt_fin ::= fin",
 /*  11 */ "last_fin ::= EOF",
 /*  12 */ "last_fin ::= fin EOF",
 /*  13 */ "fin ::= fin fin_m",
 /*  14 */ "fin ::= fin_m",
 /*  15 */ "comma ::= COMMA NL",
 /*  16 */ "comma ::= COMMA",
 /*  17 */ "seq ::= seq fin stmt",
 /*  18 */ "seq ::= stmt",
 /*  19 */ "delim_seq ::= seq opt_fin",
 /*  20 */ "class_start ::= CLASS",
 /*  21 */ "class_body ::= l1 fin END",
 /*  22 */ "class ::= class_start ID fin class_body",
 /*  23 */ "class ::= class_start ID LT s2 fin class_body",
 /*  24 */ "trait_start ::= TRAIT",
 /*  25 */ "trait_body ::= l1 fin END",
 /*  26 */ "trait ::= trait_start ID fin trait_body",
 /*  27 */ "def_start ::= DEF",
 /*  28 */ "def_body ::= seq fin END",
 /*  29 */ "arg ::= ID",
 /*  30 */ "arg ::= ID CAST np_recv",
 /*  31 */ "id_list ::= id_list comma arg",
 /*  32 */ "id_list ::= arg",
 /*  33 */ "def_args ::=",
 /*  34 */ "def_args ::= LP id_list RP",
 /*  35 */ "def_name ::= ID",
 /*  36 */ "def_name ::= OP0",
 /*  37 */ "def_name ::= LT",
 /*  38 */ "def_name ::= OP1",
 /*  39 */ "def_name ::= OP2",
 /*  40 */ "def_name ::= SQUARE",
 /*  41 */ "def ::= def_start def_name def_args fin def_body",
 /*  42 */ "def ::= def_start def_name def_args fin END",
 /*  43 */ "lit ::= NUM",
 /*  44 */ "lit ::= NIL",
 /*  45 */ "lit ::= TRUE",
 /*  46 */ "lit ::= FALSE",
 /*  47 */ "lit ::= SELF",
 /*  48 */ "lit ::= ID",
 /*  49 */ "lit ::= IVAR",
 /*  50 */ "lit ::= LITSTR",
 /*  51 */ "np_arg ::= lit",
 /*  52 */ "np_arg ::= np_arg OP0 np_arg",
 /*  53 */ "np_arg ::= np_arg OP0 LP s2 RP",
 /*  54 */ "np_arg ::= np_arg LT np_arg",
 /*  55 */ "np_arg ::= np_arg LT LP s2 RP",
 /*  56 */ "np_arg ::= np_arg OP1 np_arg",
 /*  57 */ "np_arg ::= np_arg OP1 LP s2 RP",
 /*  58 */ "np_arg ::= np_arg PIPE np_arg",
 /*  59 */ "np_arg ::= np_arg PIPE LP s2 RP",
 /*  60 */ "np_arg ::= np_arg OP2 np_arg",
 /*  61 */ "np_arg ::= np_arg OP2 LP s2 RP",
 /*  62 */ "np_arg ::= np_arg CAST np_arg",
 /*  63 */ "np_arg ::= np_arg NEQUAL np_arg",
 /*  64 */ "np_arg ::= np_arg DOT",
 /*  65 */ "np_arg ::= np_arg DOT LP RP",
 /*  66 */ "np_arg ::= np_arg DOT LP np_arg_list RP",
 /*  67 */ "np_arg ::= np_arg DCOLON ID",
 /*  68 */ "np_arg ::= np_arg DOT_DOLLAR lit",
 /*  69 */ "np_arg ::= np_arg DOT_DOLLAR lit LP RP",
 /*  70 */ "np_arg ::= np_arg DOT_DOLLAR lit LP np_arg_list RP",
 /*  71 */ "np_arg ::= NOT np_arg",
 /*  72 */ "np_arg ::= lambda",
 /*  73 */ "np_arg ::= np_arg LSB np_arg_list RSB",
 /*  74 */ "np_arg ::= TUPLE_START np_arg_list RP",
 /*  75 */ "np_arg ::= LIST np_arg_list RSB",
 /*  76 */ "np_arg ::= DICT_START np_arg_list RB",
 /*  77 */ "np_arg_list_start ::=",
 /*  78 */ "np_arg_list_elems ::= np_arg_list_elems comma np_arg",
 /*  79 */ "np_arg_list_elems ::= np_arg",
 /*  80 */ "np_kw_arg ::= ID EQUAL np_arg",
 /*  81 */ "np_kw_arg_list_elems ::= np_kw_arg_list_elems comma np_kw_arg",
 /*  82 */ "np_kw_arg_list_elems ::= np_kw_arg",
 /*  83 */ "np_opt_kw_arg_list ::=",
 /*  84 */ "np_opt_kw_arg_list ::= comma np_kw_arg_list_elems",
 /*  85 */ "np_arg_list ::= np_arg_list_start np_arg_list_elems np_opt_kw_arg_list",
 /*  86 */ "np_arg_list ::= np_arg_list_start np_kw_arg_list_elems",
 /*  87 */ "np_recv ::= lit",
 /*  88 */ "np_recv ::= ID LP RP",
 /*  89 */ "np_recv ::= ID LP np_arg_list RP",
 /*  90 */ "np_recv ::= np_recv DOT",
 /*  91 */ "np_recv ::= np_recv DOT LP RP",
 /*  92 */ "np_recv ::= np_recv DOT LP np_arg_list RP",
 /*  93 */ "np_recv ::= np_recv DCOLON ID",
 /*  94 */ "np_recv ::= np_recv DOT_DOLLAR lit",
 /*  95 */ "np_recv ::= np_recv DOT_DOLLAR lit LP RP",
 /*  96 */ "np_recv ::= np_recv DOT_DOLLAR lit LP np_arg_list RP",
 /*  97 */ "np_recv ::= lambda",
 /*  98 */ "np_recv ::= TUPLE_START np_arg_list RP",
 /*  99 */ "np_recv ::= LIST np_arg_list RSB",
 /* 100 */ "np_recv ::= DICT_START np_arg_list RB",
 /* 101 */ "np_recv ::= np_recv LSB np_arg_list RSB",
 /* 102 */ "np_recv ::= LP s2 RP",
 /* 103 */ "s2 ::= np_recv DOT np_arg_list",
 /* 104 */ "s2 ::= np_recv DOT_DOLLAR lit np_arg_list",
 /* 105 */ "s2 ::= ID np_arg_list",
 /* 106 */ "s2 ::= np_recv CAST np_arg",
 /* 107 */ "s2 ::= np_recv OP0 np_arg",
 /* 108 */ "s2 ::= np_recv OP0 LP s2 RP",
 /* 109 */ "s2 ::= np_recv LT np_arg",
 /* 110 */ "s2 ::= np_recv LT LP s2 RP",
 /* 111 */ "s2 ::= np_recv OP1 np_arg",
 /* 112 */ "s2 ::= np_recv OP1 LP s2 RP",
 /* 113 */ "s2 ::= np_recv PIPE np_arg",
 /* 114 */ "s2 ::= np_recv PIPE LP s2 RP",
 /* 115 */ "s2 ::= np_recv OP2 np_arg",
 /* 116 */ "s2 ::= np_recv OP2 LP s2 RP",
 /* 117 */ "s2 ::= np_recv NEQUAL np_arg",
 /* 118 */ "s2 ::= np_recv",
 /* 119 */ "s2 ::= NOT s2",
 /* 120 */ "s2 ::= np_recv AND np_arg",
 /* 121 */ "stmt ::= s2",
 /* 122 */ "lambda_start ::= LB",
 /* 123 */ "lambda_args ::= PIPE ID PIPE",
 /* 124 */ "lambda_args ::=",
 /* 125 */ "lambda ::= lambda_start lambda_args opt_fin delim_seq RB",
 /* 126 */ "stmt ::= IF s2 fin seq fin END",
 /* 127 */ "stmt ::= IF s2 fin seq fin ELSE fin seq fin END",
 /* 128 */ "stmt ::= UNLESS s2 fin seq fin END",
 /* 129 */ "stmt ::= WHILE s2 fin seq fin END",
 /* 130 */ "stmt ::= IMPORT DOT_NAME",
 /* 131 */ "stmt ::= IMPORT DOT_NAME AS ID",
 /* 132 */ "stmt ::= TRY fin seq fin RESCUE fin seq fin END",
 /* 133 */ "stmt ::= TRY fin seq fin RESCUE ID CAST s2 fin seq fin END",
 /* 134 */ "stmt ::= ID EQUAL s2",
 /* 135 */ "stmt ::= ID OP2_SET s2",
 /* 136 */ "stmt ::= ID OP1_SET s2",
 /* 137 */ "stmt ::= ID OP0_SET s2",
 /* 138 */ "stmt ::= IVAR EQUAL s2",
 /* 139 */ "stmt ::= IVAR OP2_SET s2",
 /* 140 */ "stmt ::= IVAR OP1_SET s2",
 /* 141 */ "stmt ::= IVAR OP0_SET s2",
 /* 142 */ "stmt ::= RAISE s2",
 /* 143 */ "stmt ::= RETURN s2",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to mariusParser and mariusParserFree.
*/
void *mariusParserAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  mariusParserARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
  mariusParserARG_STORE; /* Quiet a warning about the arg not being used */
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from mariusParserAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void mariusParserFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int mariusParserStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   mariusParserARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   mariusParserARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 55, 3 },
  { 57, 3 },
  { 57, 1 },
  { 60, 1 },
  { 60, 1 },
  { 60, 1 },
  { 60, 1 },
  { 65, 1 },
  { 65, 1 },
  { 56, 0 },
  { 56, 1 },
  { 58, 1 },
  { 58, 2 },
  { 59, 2 },
  { 59, 1 },
  { 66, 2 },
  { 66, 1 },
  { 67, 3 },
  { 67, 1 },
  { 68, 2 },
  { 69, 1 },
  { 70, 3 },
  { 61, 4 },
  { 61, 6 },
  { 72, 1 },
  { 73, 3 },
  { 62, 4 },
  { 74, 1 },
  { 75, 3 },
  { 76, 1 },
  { 76, 3 },
  { 78, 3 },
  { 78, 1 },
  { 79, 0 },
  { 79, 3 },
  { 80, 1 },
  { 80, 1 },
  { 80, 1 },
  { 80, 1 },
  { 80, 1 },
  { 80, 1 },
  { 63, 5 },
  { 63, 5 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 81, 1 },
  { 82, 1 },
  { 82, 3 },
  { 82, 5 },
  { 82, 3 },
  { 82, 5 },
  { 82, 3 },
  { 82, 5 },
  { 82, 3 },
  { 82, 5 },
  { 82, 3 },
  { 82, 5 },
  { 82, 3 },
  { 82, 3 },
  { 82, 2 },
  { 82, 4 },
  { 82, 5 },
  { 82, 3 },
  { 82, 3 },
  { 82, 5 },
  { 82, 6 },
  { 82, 2 },
  { 82, 1 },
  { 82, 4 },
  { 82, 3 },
  { 82, 3 },
  { 82, 3 },
  { 85, 0 },
  { 86, 3 },
  { 86, 1 },
  { 87, 3 },
  { 88, 3 },
  { 88, 1 },
  { 89, 0 },
  { 89, 2 },
  { 83, 3 },
  { 83, 2 },
  { 77, 1 },
  { 77, 3 },
  { 77, 4 },
  { 77, 2 },
  { 77, 4 },
  { 77, 5 },
  { 77, 3 },
  { 77, 3 },
  { 77, 5 },
  { 77, 6 },
  { 77, 1 },
  { 77, 3 },
  { 77, 3 },
  { 77, 3 },
  { 77, 4 },
  { 77, 3 },
  { 71, 3 },
  { 71, 4 },
  { 71, 2 },
  { 71, 3 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 1 },
  { 71, 2 },
  { 71, 3 },
  { 64, 1 },
  { 90, 1 },
  { 91, 3 },
  { 91, 0 },
  { 84, 5 },
  { 64, 6 },
  { 64, 10 },
  { 64, 6 },
  { 64, 6 },
  { 64, 2 },
  { 64, 4 },
  { 64, 9 },
  { 64, 12 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 2 },
  { 64, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  mariusParserARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= opt_fin l1 last_fin */
#line 32 "vm/parser.lm"
{ S->set_top(S->ret(yymsp[-1].minor.yy80.a)); }
#line 1327 "vm/parser.c.inc"
        break;
      case 1: /* l1 ::= l1 fin l1e */
      case 17: /* seq ::= seq fin stmt */ yytestcase(yyruleno==17);
#line 34 "vm/parser.lm"
{ yygotominor.yy80.a = S->seq(yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1333 "vm/parser.c.inc"
        break;
      case 2: /* l1 ::= l1e */
      case 3: /* l1e ::= class */ yytestcase(yyruleno==3);
      case 4: /* l1e ::= trait */ yytestcase(yyruleno==4);
      case 5: /* l1e ::= def */ yytestcase(yyruleno==5);
      case 6: /* l1e ::= stmt */ yytestcase(yyruleno==6);
      case 18: /* seq ::= stmt */ yytestcase(yyruleno==18);
      case 51: /* np_arg ::= lit */ yytestcase(yyruleno==51);
      case 72: /* np_arg ::= lambda */ yytestcase(yyruleno==72);
      case 87: /* np_recv ::= lit */ yytestcase(yyruleno==87);
      case 97: /* np_recv ::= lambda */ yytestcase(yyruleno==97);
      case 118: /* s2 ::= np_recv */ yytestcase(yyruleno==118);
      case 121: /* stmt ::= s2 */ yytestcase(yyruleno==121);
#line 35 "vm/parser.lm"
{ yygotominor.yy80.a = yymsp[0].minor.yy80.a; }
#line 1349 "vm/parser.c.inc"
        break;
      case 19: /* delim_seq ::= seq opt_fin */
      case 102: /* np_recv ::= LP s2 RP */ yytestcase(yyruleno==102);
#line 60 "vm/parser.lm"
{ yygotominor.yy80.a = yymsp[-1].minor.yy80.a; }
#line 1355 "vm/parser.c.inc"
        break;
      case 20: /* class_start ::= CLASS */
#line 62 "vm/parser.lm"
{ S->start_class(); }
#line 1360 "vm/parser.c.inc"
        break;
      case 21: /* class_body ::= l1 fin END */
      case 25: /* trait_body ::= l1 fin END */ yytestcase(yyruleno==25);
      case 28: /* def_body ::= seq fin END */ yytestcase(yyruleno==28);
#line 63 "vm/parser.lm"
{ yygotominor.yy80.a = yymsp[-2].minor.yy80.a; }
#line 1367 "vm/parser.c.inc"
        break;
      case 22: /* class ::= class_start ID fin class_body */
#line 65 "vm/parser.lm"
{
               yygotominor.yy80.a = S->ast_class(yymsp[-2].minor.yy0.s, 0, yymsp[0].minor.yy80.a);
             }
#line 1374 "vm/parser.c.inc"
        break;
      case 23: /* class ::= class_start ID LT s2 fin class_body */
#line 69 "vm/parser.lm"
{
               yygotominor.yy80.a = S->ast_class(yymsp[-4].minor.yy0.s, yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a);
             }
#line 1381 "vm/parser.c.inc"
        break;
      case 24: /* trait_start ::= TRAIT */
#line 73 "vm/parser.lm"
{ S->start_trait(); }
#line 1386 "vm/parser.c.inc"
        break;
      case 26: /* trait ::= trait_start ID fin trait_body */
#line 76 "vm/parser.lm"
{
               yygotominor.yy80.a = S->trait(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy80.a);
             }
#line 1393 "vm/parser.c.inc"
        break;
      case 27: /* def_start ::= DEF */
#line 80 "vm/parser.lm"
{ S->start_def(); }
#line 1398 "vm/parser.c.inc"
        break;
      case 29: /* arg ::= ID */
#line 83 "vm/parser.lm"
{ S->def_arg(yymsp[0].minor.yy0.s); }
#line 1403 "vm/parser.c.inc"
        break;
      case 30: /* arg ::= ID CAST np_recv */
#line 84 "vm/parser.lm"
{ S->def_arg_cast(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1408 "vm/parser.c.inc"
        break;
      case 35: /* def_name ::= ID */
      case 36: /* def_name ::= OP0 */ yytestcase(yyruleno==36);
      case 37: /* def_name ::= LT */ yytestcase(yyruleno==37);
      case 38: /* def_name ::= OP1 */ yytestcase(yyruleno==38);
      case 39: /* def_name ::= OP2 */ yytestcase(yyruleno==39);
      case 40: /* def_name ::= SQUARE */ yytestcase(yyruleno==40);
#line 92 "vm/parser.lm"
{ yygotominor.yy80.s = yymsp[0].minor.yy0.s; }
#line 1418 "vm/parser.c.inc"
        break;
      case 41: /* def ::= def_start def_name def_args fin def_body */
#line 100 "vm/parser.lm"
{
              yygotominor.yy80.a = S->ast_def(yymsp[-3].minor.yy80.s, yymsp[0].minor.yy80.a);
            }
#line 1425 "vm/parser.c.inc"
        break;
      case 42: /* def ::= def_start def_name def_args fin END */
#line 103 "vm/parser.lm"
{
              yygotominor.yy80.a = S->ast_def(yymsp[-3].minor.yy80.s, S->ast_nil());
            }
#line 1432 "vm/parser.c.inc"
        break;
      case 43: /* lit ::= NUM */
#line 107 "vm/parser.lm"
{ yygotominor.yy80.a = S->number(yymsp[0].minor.yy0.i); }
#line 1437 "vm/parser.c.inc"
        break;
      case 44: /* lit ::= NIL */
#line 108 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_nil();  }
#line 1442 "vm/parser.c.inc"
        break;
      case 45: /* lit ::= TRUE */
#line 109 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_true();  }
#line 1447 "vm/parser.c.inc"
        break;
      case 46: /* lit ::= FALSE */
#line 110 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_false(); }
#line 1452 "vm/parser.c.inc"
        break;
      case 47: /* lit ::= SELF */
#line 111 "vm/parser.lm"
{ yygotominor.yy80.a = S->self(); }
#line 1457 "vm/parser.c.inc"
        break;
      case 48: /* lit ::= ID */
#line 112 "vm/parser.lm"
{ yygotominor.yy80.a = S->named(yymsp[0].minor.yy0.s); }
#line 1462 "vm/parser.c.inc"
        break;
      case 49: /* lit ::= IVAR */
#line 113 "vm/parser.lm"
{ yygotominor.yy80.a = S->ivar_read(yymsp[0].minor.yy0.s); }
#line 1467 "vm/parser.c.inc"
        break;
      case 50: /* lit ::= LITSTR */
#line 114 "vm/parser.lm"
{ yygotominor.yy80.a = S->lit_str(yymsp[0].minor.yy0.s); }
#line 1472 "vm/parser.c.inc"
        break;
      case 52: /* np_arg ::= np_arg OP0 np_arg */
      case 54: /* np_arg ::= np_arg LT np_arg */ yytestcase(yyruleno==54);
      case 56: /* np_arg ::= np_arg OP1 np_arg */ yytestcase(yyruleno==56);
      case 58: /* np_arg ::= np_arg PIPE np_arg */ yytestcase(yyruleno==58);
      case 107: /* s2 ::= np_recv OP0 np_arg */ yytestcase(yyruleno==107);
      case 109: /* s2 ::= np_recv LT np_arg */ yytestcase(yyruleno==109);
      case 111: /* s2 ::= np_recv OP1 np_arg */ yytestcase(yyruleno==111);
      case 113: /* s2 ::= np_recv PIPE np_arg */ yytestcase(yyruleno==113);
      case 115: /* s2 ::= np_recv OP2 np_arg */ yytestcase(yyruleno==115);
#line 119 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_binop(yymsp[-1].minor.yy0.s, yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1485 "vm/parser.c.inc"
        break;
      case 53: /* np_arg ::= np_arg OP0 LP s2 RP */
      case 55: /* np_arg ::= np_arg LT LP s2 RP */ yytestcase(yyruleno==55);
      case 57: /* np_arg ::= np_arg OP1 LP s2 RP */ yytestcase(yyruleno==57);
      case 59: /* np_arg ::= np_arg PIPE LP s2 RP */ yytestcase(yyruleno==59);
      case 108: /* s2 ::= np_recv OP0 LP s2 RP */ yytestcase(yyruleno==108);
      case 110: /* s2 ::= np_recv LT LP s2 RP */ yytestcase(yyruleno==110);
      case 112: /* s2 ::= np_recv OP1 LP s2 RP */ yytestcase(yyruleno==112);
      case 114: /* s2 ::= np_recv PIPE LP s2 RP */ yytestcase(yyruleno==114);
      case 116: /* s2 ::= np_recv OP2 LP s2 RP */ yytestcase(yyruleno==116);
#line 121 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_binop(yymsp[-3].minor.yy0.s, yymsp[-4].minor.yy80.a, yymsp[-1].minor.yy80.a); }
#line 1498 "vm/parser.c.inc"
        break;
      case 60: /* np_arg ::= np_arg OP2 np_arg */
#line 139 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_binop(yymsp[-1].minor.yy0.cs, yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1503 "vm/parser.c.inc"
        break;
      case 61: /* np_arg ::= np_arg OP2 LP s2 RP */
#line 141 "vm/parser.lm"
{ yygotominor.yy80.a = S->ast_binop(yymsp[-3].minor.yy0.cs, yymsp[-4].minor.yy80.a, yymsp[-1].minor.yy80.a); }
#line 1508 "vm/parser.c.inc"
        break;
      case 62: /* np_arg ::= np_arg CAST np_arg */
      case 106: /* s2 ::= np_recv CAST np_arg */ yytestcase(yyruleno==106);
#line 144 "vm/parser.lm"
{ yygotominor.yy80.a = S->cast(yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1514 "vm/parser.c.inc"
        break;
      case 63: /* np_arg ::= np_arg NEQUAL np_arg */
      case 117: /* s2 ::= np_recv NEQUAL np_arg */ yytestcase(yyruleno==117);
#line 146 "vm/parser.lm"
{ yygotominor.yy80.a = S->not_(S->ast_binop("==", yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a)); }
#line 1520 "vm/parser.c.inc"
        break;
      case 64: /* np_arg ::= np_arg DOT */
      case 90: /* np_recv ::= np_recv DOT */ yytestcase(yyruleno==90);
#line 147 "vm/parser.lm"
{ yygotominor.yy80.a = S->call(yymsp[-1].minor.yy80.a, yymsp[0].minor.yy0.s); }
#line 1526 "vm/parser.c.inc"
        break;
      case 65: /* np_arg ::= np_arg DOT LP RP */
      case 91: /* np_recv ::= np_recv DOT LP RP */ yytestcase(yyruleno==91);
#line 148 "vm/parser.lm"
{ yygotominor.yy80.a = S->call(yymsp[-3].minor.yy80.a, yymsp[-2].minor.yy0.s); }
#line 1532 "vm/parser.c.inc"
        break;
      case 66: /* np_arg ::= np_arg DOT LP np_arg_list RP */
      case 92: /* np_recv ::= np_recv DOT LP np_arg_list RP */ yytestcase(yyruleno==92);
#line 150 "vm/parser.lm"
{ yygotominor.yy80.a = S->call_args(yymsp[-4].minor.yy80.a, yymsp[-3].minor.yy0.s); }
#line 1538 "vm/parser.c.inc"
        break;
      case 67: /* np_arg ::= np_arg DCOLON ID */
      case 93: /* np_recv ::= np_recv DCOLON ID */ yytestcase(yyruleno==93);
#line 151 "vm/parser.lm"
{ yygotominor.yy80.a = S->dcolon(yymsp[-2].minor.yy80.a, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1544 "vm/parser.c.inc"
        break;
      case 68: /* np_arg ::= np_arg DOT_DOLLAR lit */
      case 94: /* np_recv ::= np_recv DOT_DOLLAR lit */ yytestcase(yyruleno==94);
#line 154 "vm/parser.lm"
{ yygotominor.yy80.a = S->send_indirect(yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1550 "vm/parser.c.inc"
        break;
      case 69: /* np_arg ::= np_arg DOT_DOLLAR lit LP RP */
      case 95: /* np_recv ::= np_recv DOT_DOLLAR lit LP RP */ yytestcase(yyruleno==95);
#line 156 "vm/parser.lm"
{ yygotominor.yy80.a = S->send_indirect(yymsp[-4].minor.yy80.a, yymsp[-2].minor.yy80.a); }
#line 1556 "vm/parser.c.inc"
        break;
      case 70: /* np_arg ::= np_arg DOT_DOLLAR lit LP np_arg_list RP */
      case 96: /* np_recv ::= np_recv DOT_DOLLAR lit LP np_arg_list RP */ yytestcase(yyruleno==96);
#line 158 "vm/parser.lm"
{ yygotominor.yy80.a = S->send_indirect_args(yymsp[-5].minor.yy80.a, yymsp[-3].minor.yy80.a); }
#line 1562 "vm/parser.c.inc"
        break;
      case 71: /* np_arg ::= NOT np_arg */
      case 119: /* s2 ::= NOT s2 */ yytestcase(yyruleno==119);
#line 159 "vm/parser.lm"
{ yygotominor.yy80.a = S->not_(yymsp[0].minor.yy80.a); }
#line 1568 "vm/parser.c.inc"
        break;
      case 73: /* np_arg ::= np_arg LSB np_arg_list RSB */
      case 101: /* np_recv ::= np_recv LSB np_arg_list RSB */ yytestcase(yyruleno==101);
#line 162 "vm/parser.lm"
{ yygotominor.yy80.a = S->call_args(yymsp[-3].minor.yy80.a, "[]"); }
#line 1574 "vm/parser.c.inc"
        break;
      case 74: /* np_arg ::= TUPLE_START np_arg_list RP */
      case 98: /* np_recv ::= TUPLE_START np_arg_list RP */ yytestcase(yyruleno==98);
#line 164 "vm/parser.lm"
{ yygotominor.yy80.a = S->tuple(); }
#line 1580 "vm/parser.c.inc"
        break;
      case 75: /* np_arg ::= LIST np_arg_list RSB */
      case 99: /* np_recv ::= LIST np_arg_list RSB */ yytestcase(yyruleno==99);
#line 165 "vm/parser.lm"
{ yygotominor.yy80.a = S->list(); }
#line 1586 "vm/parser.c.inc"
        break;
      case 76: /* np_arg ::= DICT_START np_arg_list RB */
      case 100: /* np_recv ::= DICT_START np_arg_list RB */ yytestcase(yyruleno==100);
#line 166 "vm/parser.lm"
{ yygotominor.yy80.a = S->dict(); }
#line 1592 "vm/parser.c.inc"
        break;
      case 77: /* np_arg_list_start ::= */
#line 168 "vm/parser.lm"
{ S->start_arg_list(); }
#line 1597 "vm/parser.c.inc"
        break;
      case 78: /* np_arg_list_elems ::= np_arg_list_elems comma np_arg */
      case 79: /* np_arg_list_elems ::= np_arg */ yytestcase(yyruleno==79);
#line 169 "vm/parser.lm"
{ S->add_arg(yymsp[0].minor.yy80.a); }
#line 1603 "vm/parser.c.inc"
        break;
      case 80: /* np_kw_arg ::= ID EQUAL np_arg */
#line 172 "vm/parser.lm"
{ S->add_kw_arg(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1608 "vm/parser.c.inc"
        break;
      case 88: /* np_recv ::= ID LP RP */
#line 184 "vm/parser.lm"
{ yygotominor.yy80.a = S->call(S->self(), yymsp[-2].minor.yy0.s); }
#line 1613 "vm/parser.c.inc"
        break;
      case 89: /* np_recv ::= ID LP np_arg_list RP */
#line 185 "vm/parser.lm"
{ yygotominor.yy80.a = S->call_args(S->self(), yymsp[-3].minor.yy0.s); }
#line 1618 "vm/parser.c.inc"
        break;
      case 103: /* s2 ::= np_recv DOT np_arg_list */
#line 204 "vm/parser.lm"
{ yygotominor.yy80.a = S->call_args(yymsp[-2].minor.yy80.a, yymsp[-1].minor.yy0.s); }
#line 1623 "vm/parser.c.inc"
        break;
      case 104: /* s2 ::= np_recv DOT_DOLLAR lit np_arg_list */
#line 206 "vm/parser.lm"
{ yygotominor.yy80.a = S->send_indirect_args(yymsp[-3].minor.yy80.a, yymsp[-1].minor.yy80.a); }
#line 1628 "vm/parser.c.inc"
        break;
      case 105: /* s2 ::= ID np_arg_list */
#line 207 "vm/parser.lm"
{ yygotominor.yy80.a = S->call_args(S->self(), yymsp[-1].minor.yy0.s); }
#line 1633 "vm/parser.c.inc"
        break;
      case 120: /* s2 ::= np_recv AND np_arg */
#line 223 "vm/parser.lm"
{ yygotominor.yy80.a = S->and_(yymsp[-2].minor.yy80.a, yymsp[0].minor.yy80.a); }
#line 1638 "vm/parser.c.inc"
        break;
      case 122: /* lambda_start ::= LB */
#line 229 "vm/parser.lm"
{ S->start_lambda(); }
#line 1643 "vm/parser.c.inc"
        break;
      case 123: /* lambda_args ::= PIPE ID PIPE */
#line 231 "vm/parser.lm"
{ S->def_arg(yymsp[-1].minor.yy0.s); }
#line 1648 "vm/parser.c.inc"
        break;
      case 125: /* lambda ::= lambda_start lambda_args opt_fin delim_seq RB */
#line 234 "vm/parser.lm"
{ yygotominor.yy80.a = S->lambda(yymsp[-1].minor.yy80.a); }
#line 1653 "vm/parser.c.inc"
        break;
      case 126: /* stmt ::= IF s2 fin seq fin END */
#line 238 "vm/parser.lm"
{ yygotominor.yy80.a = S->if_cond(yymsp[-4].minor.yy80.a, yymsp[-2].minor.yy80.a); }
#line 1658 "vm/parser.c.inc"
        break;
      case 127: /* stmt ::= IF s2 fin seq fin ELSE fin seq fin END */
#line 240 "vm/parser.lm"
{ yygotominor.yy80.a = S->if_else(yymsp[-8].minor.yy80.a, yymsp[-6].minor.yy80.a, yymsp[-2].minor.yy80.a); }
#line 1663 "vm/parser.c.inc"
        break;
      case 128: /* stmt ::= UNLESS s2 fin seq fin END */
#line 241 "vm/parser.lm"
{ yygotominor.yy80.a = S->unless(yymsp[-4].minor.yy80.a, yymsp[-2].minor.yy80.a); }
#line 1668 "vm/parser.c.inc"
        break;
      case 129: /* stmt ::= WHILE s2 fin seq fin END */
#line 242 "vm/parser.lm"
{ yygotominor.yy80.a = S->while_(yymsp[-4].minor.yy80.a, yymsp[-2].minor.yy80.a); }
#line 1673 "vm/parser.c.inc"
        break;
      case 130: /* stmt ::= IMPORT DOT_NAME */
#line 246 "vm/parser.lm"
{ yygotominor.yy80.a = S->import(yymsp[0].minor.yy0.s); }
#line 1678 "vm/parser.c.inc"
        break;
      case 131: /* stmt ::= IMPORT DOT_NAME AS ID */
#line 247 "vm/parser.lm"
{ yygotominor.yy80.a = S->import(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1683 "vm/parser.c.inc"
        break;
      case 132: /* stmt ::= TRY fin seq fin RESCUE fin seq fin END */
#line 249 "vm/parser.lm"
{
              yygotominor.yy80.a = S->ast_try(yymsp[-6].minor.yy80.a, yymsp[-2].minor.yy80.a);
            }
#line 1690 "vm/parser.c.inc"
        break;
      case 133: /* stmt ::= TRY fin seq fin RESCUE ID CAST s2 fin seq fin END */
#line 253 "vm/parser.lm"
{
              yygotominor.yy80.a = S->ast_try(yymsp[-9].minor.yy80.a, yymsp[-6].minor.yy0.s, yymsp[-4].minor.yy80.a, yymsp[-2].minor.yy80.a);
            }
#line 1697 "vm/parser.c.inc"
        break;
      case 134: /* stmt ::= ID EQUAL s2 */
#line 257 "vm/parser.lm"
{ yygotominor.yy80.a = S->assign(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1702 "vm/parser.c.inc"
        break;
      case 135: /* stmt ::= ID OP2_SET s2 */
      case 136: /* stmt ::= ID OP1_SET s2 */ yytestcase(yyruleno==136);
      case 137: /* stmt ::= ID OP0_SET s2 */ yytestcase(yyruleno==137);
#line 258 "vm/parser.lm"
{ yygotominor.yy80.a = S->assign_op(yymsp[-2].minor.yy0.s, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1709 "vm/parser.c.inc"
        break;
      case 138: /* stmt ::= IVAR EQUAL s2 */
#line 261 "vm/parser.lm"
{ yygotominor.yy80.a = S->ivar_assign(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1714 "vm/parser.c.inc"
        break;
      case 139: /* stmt ::= IVAR OP2_SET s2 */
      case 140: /* stmt ::= IVAR OP1_SET s2 */ yytestcase(yyruleno==140);
      case 141: /* stmt ::= IVAR OP0_SET s2 */ yytestcase(yyruleno==141);
#line 263 "vm/parser.lm"
{ yygotominor.yy80.a = S->ivar_assign_op(yymsp[-2].minor.yy0.s, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy80.a); }
#line 1721 "vm/parser.c.inc"
        break;
      case 142: /* stmt ::= RAISE s2 */
#line 268 "vm/parser.lm"
{ yygotominor.yy80.a = S->raise(yymsp[0].minor.yy80.a); }
#line 1726 "vm/parser.c.inc"
        break;
      case 143: /* stmt ::= RETURN s2 */
#line 269 "vm/parser.lm"
{ yygotominor.yy80.a = S->ret(yymsp[0].minor.yy80.a); }
#line 1731 "vm/parser.c.inc"
        break;
      default:
      /* (7) fin_m ::= NL */ yytestcase(yyruleno==7);
      /* (8) fin_m ::= SEMI */ yytestcase(yyruleno==8);
      /* (9) opt_fin ::= */ yytestcase(yyruleno==9);
      /* (10) opt_fin ::= fin */ yytestcase(yyruleno==10);
      /* (11) last_fin ::= EOF */ yytestcase(yyruleno==11);
      /* (12) last_fin ::= fin EOF */ yytestcase(yyruleno==12);
      /* (13) fin ::= fin fin_m */ yytestcase(yyruleno==13);
      /* (14) fin ::= fin_m */ yytestcase(yyruleno==14);
      /* (15) comma ::= COMMA NL */ yytestcase(yyruleno==15);
      /* (16) comma ::= COMMA */ yytestcase(yyruleno==16);
      /* (31) id_list ::= id_list comma arg */ yytestcase(yyruleno==31);
      /* (32) id_list ::= arg */ yytestcase(yyruleno==32);
      /* (33) def_args ::= */ yytestcase(yyruleno==33);
      /* (34) def_args ::= LP id_list RP */ yytestcase(yyruleno==34);
      /* (81) np_kw_arg_list_elems ::= np_kw_arg_list_elems comma np_kw_arg */ yytestcase(yyruleno==81);
      /* (82) np_kw_arg_list_elems ::= np_kw_arg */ yytestcase(yyruleno==82);
      /* (83) np_opt_kw_arg_list ::= */ yytestcase(yyruleno==83);
      /* (84) np_opt_kw_arg_list ::= comma np_kw_arg_list_elems */ yytestcase(yyruleno==84);
      /* (85) np_arg_list ::= np_arg_list_start np_arg_list_elems np_opt_kw_arg_list */ yytestcase(yyruleno==85);
      /* (86) np_arg_list ::= np_arg_list_start np_kw_arg_list_elems */ yytestcase(yyruleno==86);
      /* (124) lambda_args ::= */ yytestcase(yyruleno==124);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  mariusParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  mariusParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  mariusParserARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 25 "vm/parser.lm"

  S->set_syntax_error();

  std::cout << "Syntax error at line " << S->line()
            << ", column " << S->column() << std::endl;
#line 1820 "vm/parser.c.inc"
  mariusParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  mariusParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  mariusParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "mariusParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void mariusParser(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  mariusParserTOKENTYPE yyminor       /* The value for the token */
  mariusParserARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  mariusParserARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
