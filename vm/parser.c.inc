/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#include <assert.h>
#line 2 "vm/parser.lm"

#include "parser_state.hpp"
#include "parser_tokens.h"
#include <iostream>
#line 14 "vm/parser.c.inc"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    r5ParserTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is r5ParserTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    r5ParserARG_SDECL     A static variable declaration for the %extra_argument
**    r5ParserARG_PDECL     A parameter declaration for the %extra_argument
**    r5ParserARG_STORE     Code to store %extra_argument into yypParser
**    r5ParserARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 97
#define YYACTIONTYPE unsigned short int
#define r5ParserTOKENTYPE  r5::ParserToken 
typedef union {
  int yyinit;
  r5ParserTOKENTYPE yy0;
  r5::ParserToken yy190;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define r5ParserARG_SDECL  r5::ParserState* S ;
#define r5ParserARG_PDECL , r5::ParserState* S 
#define r5ParserARG_FETCH  r5::ParserState* S  = yypParser->S 
#define r5ParserARG_STORE yypParser->S  = S 
#define YYNSTATE 339
#define YYNRULE 162
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (1763)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    57,  309,  152,   31,  301,  333,  332,  331,    5,  329,
 /*    10 */   139,   84,  327,  325,  295,   58,   78,  117,  314,  318,
 /*    20 */   317,  316,  315,  160,  310,   91,  123,  122,  121,  239,
 /*    30 */   297,   30,  339,   42,   40,   29,   28,  185,   57,  207,
 /*    40 */   100,   27,  236,  333,  332,  233,  131,  329,  328,   84,
 /*    50 */   327,  325,  231,   58,  132,  183,  314,  318,  317,  316,
 /*    60 */   315,  160,  310,  110,  123,  122,  121,  384,  297,   30,
 /*    70 */    79,   42,   40,   29,   28,  185,   57,  118,  100,  333,
 /*    80 */   332,  333,  332,  220,    6,  329,  326,   84,  327,  325,
 /*    90 */   295,   58,  184,  173,  314,  318,  317,  316,  315,  160,
 /*   100 */   310,  232,  123,  122,  121,  117,  297,   30,  163,   42,
 /*   110 */    40,   29,   28,  185,   57,  290,  100,  312,  288,  333,
 /*   120 */   332,  140,  167,  329,  139,   84,  327,  325,  206,   58,
 /*   130 */    27,   48,  314,  318,  317,  316,  315,  160,  310,  116,
 /*   140 */   123,  122,  121,  307,  297,   30,  306,   42,   40,   29,
 /*   150 */    28,  185,   57,   32,  100,  115,  302,  333,  332,   47,
 /*   160 */    46,   45,  260,   84,  333,  332,  205,   58,   27,  173,
 /*   170 */   314,  318,  317,  316,  315,  160,  310,  234,  123,  122,
 /*   180 */   121,  303,  297,   30,  106,   42,   40,   29,   28,  185,
 /*   190 */    57,  300,  100,  502,    7,  333,  332,  133,  333,  332,
 /*   200 */   259,   84,  299,  295,  180,   58,  202,  298,  314,  318,
 /*   210 */   317,  316,  315,  160,  310,  296,  123,  122,  121,  286,
 /*   220 */   297,   30,  292,   42,   40,   29,   28,  185,   57,  287,
 /*   230 */   100,    2,   17,  333,  332,  133,  285,  295,  256,   84,
 /*   240 */   204,  295,   27,   58,  281,  284,  314,  318,  317,  316,
 /*   250 */   315,  160,  310,  279,  123,  122,  121,  277,  297,   30,
 /*   260 */   276,   42,   40,   29,   28,  185,   57,  275,  100,    4,
 /*   270 */   249,  333,  332,   26,  274,  295,  255,   84,  273,  295,
 /*   280 */   200,   58,   27,  272,  314,  318,  317,  316,  315,  160,
 /*   290 */   310,   44,  123,  122,  121,   41,  297,   30,  254,   42,
 /*   300 */    40,   29,   28,  185,   57,   39,  100,   16,  165,  333,
 /*   310 */   332,  309,  143,  295,  301,   84,  112,  240,  136,   58,
 /*   320 */   139,  181,  314,  318,  317,  316,  315,  160,  310,  182,
 /*   330 */   123,  122,  121,  253,  297,   30,   79,   42,   40,   29,
 /*   340 */    28,  185,   57,  248,  100,   90,   38,  333,  332,  333,
 /*   350 */   332,  221,  252,   84,  242,   71,  291,   58,   27,  247,
 /*   360 */   314,  318,  317,  316,  315,  160,  310,   78,  123,  122,
 /*   370 */   121,  113,  297,   30,  246,   42,   40,   29,   28,  185,
 /*   380 */    57,  245,  100,  244,  243,  333,  332,  199,   18,   27,
 /*   390 */   250,   84,  237,  114,  295,   58,   71,  134,  314,  318,
 /*   400 */   317,  316,  315,  160,  310,   95,  123,  122,  121,  119,
 /*   410 */   297,   30,   82,   42,   40,   29,   28,  185,   57,  203,
 /*   420 */   100,  137,  172,  333,  332,  198,  241,   27,  230,   84,
 /*   430 */   173,  235,  194,   58,   27,   93,  314,  318,  317,  316,
 /*   440 */   315,  160,  310,  168,  123,  122,  121,  330,  297,   30,
 /*   450 */    83,   42,   40,   29,   28,  185,   57,  135,  100,  209,
 /*   460 */    87,  333,  332,  171,   15,   27,  228,   84,  216,  238,
 /*   470 */   295,   58,  170,  164,  314,  318,  317,  316,  315,  160,
 /*   480 */   310,  313,  123,  122,  121,  308,  297,   30,  304,   42,
 /*   490 */    40,   29,   28,  185,   57,  293,  100,  280,  503,  333,
 /*   500 */   332,  214,   25,   27,  226,   84,  503,  503,  295,   58,
 /*   510 */   503,  503,  314,  318,  317,  316,  315,  160,  310,  503,
 /*   520 */   123,  122,  121,  503,  297,   30,   57,   42,   40,   29,
 /*   530 */    28,  185,  503,  503,  100,  329,  503,   84,  327,  325,
 /*   540 */   211,   58,   27,  503,  314,  318,  317,  316,  315,  160,
 /*   550 */   310,  503,  123,  122,  121,  503,  297,   30,  503,   42,
 /*   560 */    40,   29,   28,  185,   57,  208,  100,   27,  503,  333,
 /*   570 */   332,  309,  142,  503,  301,   84,  503,  240,  138,   58,
 /*   580 */   139,  503,  314,  318,  317,  316,  315,  160,  310,  503,
 /*   590 */   123,  122,  121,  503,  297,   30,   57,   42,   40,   29,
 /*   600 */    28,  185,  503,  503,  100,  503,   14,   84,  201,  503,
 /*   610 */    27,   58,  295,  503,  314,  318,  317,  316,  315,  160,
 /*   620 */   310,  503,  123,  122,  121,  503,  297,   30,  426,   42,
 /*   630 */    40,   29,   28,  185,   24,  195,  100,   27,   13,  426,
 /*   640 */   295,  503,   60,  114,  295,  503,  426,  426,  426,  426,
 /*   650 */   426,  426,  426,  305,  426,  426,  426,  278,  426,   27,
 /*   660 */   314,  318,  317,  316,  315,  311,  310,  289,   23,   27,
 /*   670 */    51,   50,   49,  111,  295,  503,  225,  337,  336,  335,
 /*   680 */   334,  330,  503,   12,  503,  219,  223,  188,  218,  295,
 /*   690 */    89,  503,  503,  141,   66,   22,  212,  210,  130,  127,
 /*   700 */   290,  295,   21,  288,  503,  503,  503,  109,  295,  139,
 /*   710 */   225,  337,  336,  335,  334,  330,  503,  503,  503,  219,
 /*   720 */   271,  188,  218,  224,   89,   10,  141,  141,  503,  503,
 /*   730 */   503,  295,  503,  290,  290,  503,  288,  288,  215,  196,
 /*   740 */   128,  120,  139,  139,  111,  503,  503,  225,  337,  336,
 /*   750 */   335,  334,  330,  503,   20,  503,  219,  222,  188,  218,
 /*   760 */   295,   89,    9,   19,  141,  503,  503,  426,  295,  295,
 /*   770 */     8,  290,  503,    1,  288,  503,  295,  503,  426,  295,
 /*   780 */   139,   59,  118,  503,  503,  426,  426,  426,  426,  426,
 /*   790 */   426,  426,  426,  426,  426,  426,    3,  426,  212,  210,
 /*   800 */   130,  127,  295,  426,  503,  503,   43,  114,  503,  503,
 /*   810 */   426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
 /*   820 */   426,  503,  426,   11,  309,  154,  503,  301,  426,  295,
 /*   830 */   503,  503,  114,  139,  503,  426,  426,  426,  426,  426,
 /*   840 */   426,  426,  426,  426,  426,  426,  503,  426,  503,  309,
 /*   850 */   153,  503,  301,  426,  503,  503,  503,  113,  139,  503,
 /*   860 */   426,  426,  426,  426,  426,  426,  426,   75,  426,  426,
 /*   870 */   426,  503,  426,  503,  309,  161,  503,  301,  213,  503,
 /*   880 */   503,  503,   33,  139,  503,  314,  318,  317,  316,  315,
 /*   890 */   311,  310,   75,  126,  125,  124,  503,  297,  503,  309,
 /*   900 */   151,  503,  301,  213,  503,  503,  503,   34,  139,  503,
 /*   910 */   314,  318,  317,  316,  315,  311,  310,   75,  126,  125,
 /*   920 */   124,  503,  297,  503,  309,  145,  503,  301,  213,  503,
 /*   930 */   503,  503,   35,  139,  503,  314,  318,  317,  316,  315,
 /*   940 */   311,  310,   75,  126,  125,  124,  503,  297,  503,  309,
 /*   950 */   144,  503,  301,  213,  503,  503,  503,   36,  139,  503,
 /*   960 */   314,  318,  317,  316,  315,  311,  310,   75,  126,  125,
 /*   970 */   124,  503,  297,  503,  309,  156,  503,  301,  213,  503,
 /*   980 */   503,  503,   37,  139,  503,  314,  318,  317,  316,  315,
 /*   990 */   311,  310,   75,  126,  125,  124,  503,  297,  503,  309,
 /*  1000 */   155,  503,  301,  213,  503,  503,  503,   56,  139,  503,
 /*  1010 */   314,  318,  317,  316,  315,  311,  310,   75,  126,  125,
 /*  1020 */   124,  503,  297,  503,  309,  158,  503,  301,  213,  503,
 /*  1030 */   503,  503,   55,  139,  503,  314,  318,  317,  316,  315,
 /*  1040 */   311,  310,   75,  126,  125,  124,  503,  297,  503,  309,
 /*  1050 */   157,  503,  301,  213,  503,  503,  503,   54,  139,  503,
 /*  1060 */   314,  318,  317,  316,  315,  311,  310,   75,  126,  125,
 /*  1070 */   124,  503,  297,  503,  309,  162,  503,  301,  213,  503,
 /*  1080 */   503,  503,   53,  139,  503,  314,  318,  317,  316,  315,
 /*  1090 */   311,  310,   75,  126,  125,  124,  503,  297,  503,  309,
 /*  1100 */   150,  503,  301,  213,  503,  503,  503,   52,  139,  503,
 /*  1110 */   314,  318,  317,  316,  315,  311,  310,   57,  126,  125,
 /*  1120 */   124,  503,  297,  503,  309,  149,  503,  301,   88,  503,
 /*  1130 */   503,  503,   58,  139,  503,  314,  318,  317,  316,  315,
 /*  1140 */   311,  310,   57,  123,  122,  121,  503,  297,  503,  309,
 /*  1150 */   148,  503,  301,   85,  503,  503,  503,   58,  139,  503,
 /*  1160 */   314,  318,  317,  316,  315,  311,  310,  503,  123,  122,
 /*  1170 */   121,   80,  297,  503,  225,  337,  336,  335,  334,  503,
 /*  1180 */   503,  503,  503,  219,  282,  188,  218,  503,   89,  159,
 /*  1190 */   141,  141,  503,  503,  503,  503,  290,  290,  290,  288,
 /*  1200 */   288,  288,  503,  503,  503,  139,  139,  139,  338,  337,
 /*  1210 */   336,  335,  334,  330,  503,  261,  503,  219,  503,  188,
 /*  1220 */   218,  141,   89,  503,  503,  141,  503,  503,  290,  503,
 /*  1230 */   503,  288,  290,  503,  503,  288,  503,  139,  169,  108,
 /*  1240 */   503,  139,   58,  503,  503,  314,  318,  317,  316,  315,
 /*  1250 */   311,  310,   75,  123,  122,  121,  503,  297,  503,  503,
 /*  1260 */    68,   67,   66,  213,  212,  210,  130,  127,  503,  503,
 /*  1270 */   314,  318,  317,  316,  315,  311,  310,  503,  126,  125,
 /*  1280 */   124,   75,  297,  503,   72,   65,   64,   74,   73,   63,
 /*  1290 */    62,   61,  166,   86,  196,  129,  120,  503,  503,  314,
 /*  1300 */   318,  317,  316,  315,  311,  310,  503,  126,  125,  124,
 /*  1310 */   503,  297,   70,   69,   77,   76,   68,   67,   66,  503,
 /*  1320 */   212,  210,  130,  127,  309,  147,  503,  301,  251,  330,
 /*  1330 */   503,   94,  503,  139,  503,  188,  503,  503,  503,  229,
 /*  1340 */   503,  141,  503,  251,  330,  503,   94,  503,  290,  503,
 /*  1350 */   188,  288,  503,  503,  227,  251,  141,  139,   81,  179,
 /*  1360 */   503,  503,  188,  290,  503,  503,  288,  503,  141,  503,
 /*  1370 */   251,  330,  139,  107,  503,  290,  503,  188,  288,  503,
 /*  1380 */   503,  503,  503,  141,  139,  251,  330,  503,  105,  503,
 /*  1390 */   290,  503,  188,  288,  503,  503,  503,  503,  141,  139,
 /*  1400 */   251,  330,  503,  103,  503,  290,  503,  188,  288,  503,
 /*  1410 */   503,  503,  503,  141,  139,  251,  330,  503,  101,  503,
 /*  1420 */   290,  503,  188,  288,  503,  503,  503,  503,  141,  139,
 /*  1430 */   503,  503,  503,  251,  330,  290,   99,  503,  288,  503,
 /*  1440 */   188,  503,  503,  503,  139,  503,  141,  503,  251,  330,
 /*  1450 */   503,   98,  503,  290,  503,  188,  288,  503,  503,  503,
 /*  1460 */   503,  141,  139,  251,  330,  503,   96,  503,  290,  503,
 /*  1470 */   188,  288,  503,  503,  503,  503,  141,  139,  503,  503,
 /*  1480 */   503,  294,  330,  290,  503,  503,  288,  503,  188,  324,
 /*  1490 */   323,  503,  139,  322,  141,  321,  503,  503,  503,  309,
 /*  1500 */   146,  290,  301,  503,  288,  261,  261,  217,  139,  503,
 /*  1510 */   139,  141,  141,  320,  319,  503,  503,  503,  290,  290,
 /*  1520 */   197,  288,  288,  503,  503,  283,  141,  139,  139,  104,
 /*  1530 */   102,  141,  503,  290,  503,  503,  288,  503,  290,  503,
 /*  1540 */   193,  288,  139,  503,  503,  503,  141,  139,  192,  503,
 /*  1550 */   503,  503,  503,  290,  141,  503,  288,  503,  503,  503,
 /*  1560 */   191,  290,  139,  503,  288,  190,  141,  503,  503,  503,
 /*  1570 */   139,  141,  503,  290,  503,  503,  288,  189,  290,  270,
 /*  1580 */   503,  288,  139,  141,  503,  141,  503,  139,  503,  503,
 /*  1590 */   290,  269,  290,  288,  503,  288,  503,  141,  503,  139,
 /*  1600 */   503,  139,  268,  267,  290,  503,  503,  288,  141,  141,
 /*  1610 */   503,  503,  503,  139,  266,  290,  290,  503,  288,  288,
 /*  1620 */   141,  503,  503,  503,  139,  139,  265,  290,  264,  503,
 /*  1630 */   288,  503,  141,  503,  141,  503,  139,  503,  503,  290,
 /*  1640 */   503,  290,  288,  263,  288,  262,  503,  503,  139,  141,
 /*  1650 */   139,  141,  503,  503,  503,  503,  290,  187,  290,  288,
 /*  1660 */   503,  288,  258,  141,  503,  139,  503,  139,  141,  503,
 /*  1670 */   290,  503,  503,  288,  186,  290,  257,  503,  288,  139,
 /*  1680 */   141,  503,  141,  503,  139,  503,  503,  290,   97,  290,
 /*  1690 */   288,  503,  288,  503,  141,  503,  139,  503,  139,  178,
 /*  1700 */   177,  290,  503,  503,  288,  141,  141,  503,  503,  503,
 /*  1710 */   139,  176,  290,  290,  503,  288,  288,  141,  503,  503,
 /*  1720 */   503,  139,  139,  175,  290,  503,  503,  288,  174,  141,
 /*  1730 */   503,  503,  503,  139,  141,  503,  290,  503,  503,  288,
 /*  1740 */    92,  290,  503,  503,  288,  139,  141,  503,  503,  503,
 /*  1750 */   139,  503,  503,  290,  503,  503,  288,  503,  503,  503,
 /*  1760 */   503,  503,  139,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     9,   84,   85,   66,   87,   14,   15,   16,   59,   18,
 /*    10 */    93,   20,   21,   22,   65,   24,   23,   24,   27,   28,
 /*    20 */    29,   30,   31,   32,   33,   20,   35,   36,   37,   92,
 /*    30 */    39,   40,    0,   42,   43,   44,   45,   46,    9,   86,
 /*    40 */    49,   88,   76,   14,   15,   79,   80,   18,   19,   20,
 /*    50 */    21,   22,   76,   24,   78,   11,   27,   28,   29,   30,
 /*    60 */    31,   32,   33,   20,   35,   36,   37,   10,   39,   40,
 /*    70 */     4,   42,   43,   44,   45,   46,    9,   24,   49,   14,
 /*    80 */    15,   14,   15,   58,   59,   18,   19,   20,   21,   22,
 /*    90 */    65,   24,   48,   17,   27,   28,   29,   30,   31,   32,
 /*   100 */    33,   25,   35,   36,   37,   24,   39,   40,   77,   42,
 /*   110 */    43,   44,   45,   46,    9,   84,   49,   25,   87,   14,
 /*   120 */    15,   82,   83,   18,   93,   20,   21,   22,   86,   24,
 /*   130 */    88,   23,   27,   28,   29,   30,   31,   32,   33,   24,
 /*   140 */    35,   36,   37,   25,   39,   40,   20,   42,   43,   44,
 /*   150 */    45,   46,    9,    3,   49,   24,   34,   14,   15,   51,
 /*   160 */    52,   53,   19,   20,   14,   15,   86,   24,   88,   17,
 /*   170 */    27,   28,   29,   30,   31,   32,   33,   25,   35,   36,
 /*   180 */    37,   25,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   190 */     9,   25,   49,   55,   56,   14,   15,   59,   14,   15,
 /*   200 */    19,   20,   34,   65,   20,   24,   20,   38,   27,   28,
 /*   210 */    29,   30,   31,   32,   33,    7,   35,   36,   37,   34,
 /*   220 */    39,   40,   25,   42,   43,   44,   45,   46,    9,   25,
 /*   230 */    49,   59,   56,   14,   15,   59,   38,   65,   19,   20,
 /*   240 */    86,   65,   88,   24,   20,   25,   27,   28,   29,   30,
 /*   250 */    31,   32,   33,   25,   35,   36,   37,   34,   39,   40,
 /*   260 */    25,   42,   43,   44,   45,   46,    9,   25,   49,   59,
 /*   270 */    56,   14,   15,   59,   25,   65,   19,   20,   25,   65,
 /*   280 */    86,   24,   88,   25,   27,   28,   29,   30,   31,   32,
 /*   290 */    33,   40,   35,   36,   37,   40,   39,   40,   20,   42,
 /*   300 */    43,   44,   45,   46,    9,   40,   49,   59,   47,   14,
 /*   310 */    15,   84,   85,   65,   87,   20,   89,   90,   91,   24,
 /*   320 */    93,   48,   27,   28,   29,   30,   31,   32,   33,   20,
 /*   330 */    35,   36,   37,   20,   39,   40,    4,   42,   43,   44,
 /*   340 */    45,   46,    9,   38,   49,   50,    4,   14,   15,   14,
 /*   350 */    15,   16,   19,   20,   14,   23,   86,   24,   88,   25,
 /*   360 */    27,   28,   29,   30,   31,   32,   33,   23,   35,   36,
 /*   370 */    37,   24,   39,   40,   25,   42,   43,   44,   45,   46,
 /*   380 */     9,   25,   49,   25,   25,   14,   15,   86,   59,   88,
 /*   390 */    19,   20,   25,   24,   65,   24,   23,   10,   27,   28,
 /*   400 */    29,   30,   31,   32,   33,   81,   35,   36,   37,   24,
 /*   410 */    39,   40,   94,   42,   43,   44,   45,   46,    9,    7,
 /*   420 */    49,   66,   20,   14,   15,   86,   90,   88,   19,   20,
 /*   430 */    17,   79,   86,   24,   88,   81,   27,   28,   29,   30,
 /*   440 */    31,   32,   33,   20,   35,   36,   37,   65,   39,   40,
 /*   450 */    66,   42,   43,   44,   45,   46,    9,   66,   49,   84,
 /*   460 */    84,   14,   15,   86,   59,   88,   19,   20,   20,   25,
 /*   470 */    65,   24,   84,   20,   27,   28,   29,   30,   31,   32,
 /*   480 */    33,   25,   35,   36,   37,   25,   39,   40,   25,   42,
 /*   490 */    43,   44,   45,   46,    9,   25,   49,   25,   96,   14,
 /*   500 */    15,   86,   59,   88,   19,   20,   96,   96,   65,   24,
 /*   510 */    96,   96,   27,   28,   29,   30,   31,   32,   33,   96,
 /*   520 */    35,   36,   37,   96,   39,   40,    9,   42,   43,   44,
 /*   530 */    45,   46,   96,   96,   49,   18,   96,   20,   21,   22,
 /*   540 */    86,   24,   88,   96,   27,   28,   29,   30,   31,   32,
 /*   550 */    33,   96,   35,   36,   37,   96,   39,   40,   96,   42,
 /*   560 */    43,   44,   45,   46,    9,   86,   49,   88,   96,   14,
 /*   570 */    15,   84,   85,   96,   87,   20,   96,   90,   91,   24,
 /*   580 */    93,   96,   27,   28,   29,   30,   31,   32,   33,   96,
 /*   590 */    35,   36,   37,   96,   39,   40,    9,   42,   43,   44,
 /*   600 */    45,   46,   96,   96,   49,   96,   59,   20,   86,   96,
 /*   610 */    88,   24,   65,   96,   27,   28,   29,   30,   31,   32,
 /*   620 */    33,   96,   35,   36,   37,   96,   39,   40,    9,   42,
 /*   630 */    43,   44,   45,   46,   59,   86,   49,   88,   59,   20,
 /*   640 */    65,   96,   23,   24,   65,   96,   27,   28,   29,   30,
 /*   650 */    31,   32,   33,   20,   35,   36,   37,   86,   39,   88,
 /*   660 */    27,   28,   29,   30,   31,   32,   33,   86,   59,   88,
 /*   670 */    51,   52,   53,   57,   65,   96,   60,   61,   62,   63,
 /*   680 */    64,   65,   96,   59,   96,   69,   70,   71,   72,   65,
 /*   690 */    74,   96,   96,   77,    8,   59,   10,   11,   12,   13,
 /*   700 */    84,   65,   59,   87,   96,   96,   96,   57,   65,   93,
 /*   710 */    60,   61,   62,   63,   64,   65,   96,   96,   96,   69,
 /*   720 */    71,   71,   72,   73,   74,   59,   77,   77,   96,   96,
 /*   730 */    96,   65,   96,   84,   84,   96,   87,   87,   10,   11,
 /*   740 */    12,   13,   93,   93,   57,   96,   96,   60,   61,   62,
 /*   750 */    63,   64,   65,   96,   59,   96,   69,   70,   71,   72,
 /*   760 */    65,   74,   59,   59,   77,   96,   96,    9,   65,   65,
 /*   770 */    59,   84,   96,   59,   87,   96,   65,   96,   20,   65,
 /*   780 */    93,   23,   24,   96,   96,   27,   28,   29,   30,   31,
 /*   790 */    32,   33,    9,   35,   36,   37,   59,   39,   10,   11,
 /*   800 */    12,   13,   65,   20,   96,   96,   23,   24,   96,   96,
 /*   810 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*   820 */    37,   96,   39,   59,   84,   85,   96,   87,   20,   65,
 /*   830 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*   840 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*   850 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*   860 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*   870 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*   880 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*   890 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*   900 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*   910 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*   920 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*   930 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*   940 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*   950 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*   960 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*   970 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*   980 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*   990 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*  1000 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*  1010 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*  1020 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*  1030 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*  1040 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*  1050 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*  1060 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*  1070 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*  1080 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*  1090 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*  1100 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*  1110 */    27,   28,   29,   30,   31,   32,   33,    9,   35,   36,
 /*  1120 */    37,   96,   39,   96,   84,   85,   96,   87,   20,   96,
 /*  1130 */    96,   96,   24,   93,   96,   27,   28,   29,   30,   31,
 /*  1140 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   84,
 /*  1150 */    85,   96,   87,   20,   96,   96,   96,   24,   93,   96,
 /*  1160 */    27,   28,   29,   30,   31,   32,   33,   96,   35,   36,
 /*  1170 */    37,   57,   39,   96,   60,   61,   62,   63,   64,   96,
 /*  1180 */    96,   96,   96,   69,   71,   71,   72,   96,   74,   77,
 /*  1190 */    77,   77,   96,   96,   96,   96,   84,   84,   84,   87,
 /*  1200 */    87,   87,   96,   96,   96,   93,   93,   93,   60,   61,
 /*  1210 */    62,   63,   64,   65,   96,   71,   96,   69,   96,   71,
 /*  1220 */    72,   77,   74,   96,   96,   77,   96,   96,   84,   96,
 /*  1230 */    96,   87,   84,   96,   96,   87,   96,   93,   20,   95,
 /*  1240 */    96,   93,   24,   96,   96,   27,   28,   29,   30,   31,
 /*  1250 */    32,   33,    9,   35,   36,   37,   96,   39,   96,   96,
 /*  1260 */     6,    7,    8,   20,   10,   11,   12,   13,   96,   96,
 /*  1270 */    27,   28,   29,   30,   31,   32,   33,   96,   35,   36,
 /*  1280 */    37,    9,   39,   96,    1,    2,    3,    4,    5,    6,
 /*  1290 */     7,    8,   20,   10,   11,   12,   13,   96,   96,   27,
 /*  1300 */    28,   29,   30,   31,   32,   33,   96,   35,   36,   37,
 /*  1310 */    96,   39,    2,    3,    4,    5,    6,    7,    8,   96,
 /*  1320 */    10,   11,   12,   13,   84,   85,   96,   87,   64,   65,
 /*  1330 */    96,   67,   96,   93,   96,   71,   96,   96,   96,   75,
 /*  1340 */    96,   77,   96,   64,   65,   96,   67,   96,   84,   96,
 /*  1350 */    71,   87,   96,   96,   75,   64,   77,   93,   67,   68,
 /*  1360 */    96,   96,   71,   84,   96,   96,   87,   96,   77,   96,
 /*  1370 */    64,   65,   93,   67,   96,   84,   96,   71,   87,   96,
 /*  1380 */    96,   96,   96,   77,   93,   64,   65,   96,   67,   96,
 /*  1390 */    84,   96,   71,   87,   96,   96,   96,   96,   77,   93,
 /*  1400 */    64,   65,   96,   67,   96,   84,   96,   71,   87,   96,
 /*  1410 */    96,   96,   96,   77,   93,   64,   65,   96,   67,   96,
 /*  1420 */    84,   96,   71,   87,   96,   96,   96,   96,   77,   93,
 /*  1430 */    96,   96,   96,   64,   65,   84,   67,   96,   87,   96,
 /*  1440 */    71,   96,   96,   96,   93,   96,   77,   96,   64,   65,
 /*  1450 */    96,   67,   96,   84,   96,   71,   87,   96,   96,   96,
 /*  1460 */    96,   77,   93,   64,   65,   96,   67,   96,   84,   96,
 /*  1470 */    71,   87,   96,   96,   96,   96,   77,   93,   96,   96,
 /*  1480 */    96,   64,   65,   84,   96,   96,   87,   96,   71,    2,
 /*  1490 */     3,   96,   93,    6,   77,    8,   96,   96,   96,   84,
 /*  1500 */    85,   84,   87,   96,   87,   71,   71,   20,   93,   96,
 /*  1510 */    93,   77,   77,   26,   27,   96,   96,   96,   84,   84,
 /*  1520 */    71,   87,   87,   96,   96,   71,   77,   93,   93,   95,
 /*  1530 */    95,   77,   96,   84,   96,   96,   87,   96,   84,   96,
 /*  1540 */    71,   87,   93,   96,   96,   96,   77,   93,   71,   96,
 /*  1550 */    96,   96,   96,   84,   77,   96,   87,   96,   96,   96,
 /*  1560 */    71,   84,   93,   96,   87,   71,   77,   96,   96,   96,
 /*  1570 */    93,   77,   96,   84,   96,   96,   87,   71,   84,   71,
 /*  1580 */    96,   87,   93,   77,   96,   77,   96,   93,   96,   96,
 /*  1590 */    84,   71,   84,   87,   96,   87,   96,   77,   96,   93,
 /*  1600 */    96,   93,   71,   71,   84,   96,   96,   87,   77,   77,
 /*  1610 */    96,   96,   96,   93,   71,   84,   84,   96,   87,   87,
 /*  1620 */    77,   96,   96,   96,   93,   93,   71,   84,   71,   96,
 /*  1630 */    87,   96,   77,   96,   77,   96,   93,   96,   96,   84,
 /*  1640 */    96,   84,   87,   71,   87,   71,   96,   96,   93,   77,
 /*  1650 */    93,   77,   96,   96,   96,   96,   84,   71,   84,   87,
 /*  1660 */    96,   87,   71,   77,   96,   93,   96,   93,   77,   96,
 /*  1670 */    84,   96,   96,   87,   71,   84,   71,   96,   87,   93,
 /*  1680 */    77,   96,   77,   96,   93,   96,   96,   84,   71,   84,
 /*  1690 */    87,   96,   87,   96,   77,   96,   93,   96,   93,   71,
 /*  1700 */    71,   84,   96,   96,   87,   77,   77,   96,   96,   96,
 /*  1710 */    93,   71,   84,   84,   96,   87,   87,   77,   96,   96,
 /*  1720 */    96,   93,   93,   71,   84,   96,   96,   87,   71,   77,
 /*  1730 */    96,   96,   96,   93,   77,   96,   84,   96,   96,   87,
 /*  1740 */    71,   84,   96,   96,   87,   93,   77,   96,   96,   96,
 /*  1750 */    93,   96,   96,   84,   96,   96,   87,   96,   96,   96,
 /*  1760 */    96,   96,   93,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_COUNT (220)
#define YY_SHIFT_MIN   (-9)
#define YY_SHIFT_MAX   (1487)
static const short yy_shift_ofst[] = {
 /*     0 */    65,  105,  105,  105,   67,   29,   -9,  517,  485,  447,
 /*    10 */   555,  555,  555,  555,  555,  555,  555,  587,  143,  409,
 /*    20 */   371,  333,  295,  257,  219,  181,  555, 1272, 1133, 1133,
 /*    30 */  1133, 1272, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
 /*    40 */  1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
 /*    50 */  1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
 /*    60 */  1108, 1083, 1058, 1033, 1008,  983,  958,  933,  908,  883,
 /*    70 */   858, 1218, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1218,
 /*    80 */   335,   65,   65,  453,  619,  783,  758,  833,  808, 1487,
 /*    90 */   184,  150,   65,   65,   65,   65,   65,   65,   65,   65,
 /*   100 */    65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
 /*   110 */    65,   65,  413,  472,  470,  463,  460,  456,  444,  448,
 /*   120 */   -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  633,  633,
 /*   130 */   633,  152,   76,   65,  385,  423,  413,  402,  413,  412,
 /*   140 */   385, 1283, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
 /*   150 */  1310, 1310, 1310, 1254, 1254, 1254, 1254,  686,  686,  728,
 /*   160 */   108,  788,  788,  728,  332,   44,   -7,  387,  373,  369,
 /*   170 */   347,  367,  344,  340,  359,  358,  356,  349,  334,  305,
 /*   180 */   342,  313,  273,  309,  278,  261,  265,  255,  251,  258,
 /*   190 */   253,  249,  242,  235,  223,  228,  224,  220,  198,  185,
 /*   200 */   204,  197,  208,  186,  169,  168,  166,  122,  156,  131,
 /*   210 */   126,  118,  115,   81,   92,   53,   66,   57,   43,    5,
 /*   220 */    32,
};
#define YY_REDUCE_USE_DFLT (-84)
#define YY_REDUCE_COUNT (140)
#define YY_REDUCE_MIN   (-83)
#define YY_REDUCE_MAX   (1669)
static const short yy_reduce_ofst[] = {
 /*     0 */   138,  687,  650,  616, 1148, 1148, 1148, 1114, 1279, 1264,
 /*    10 */  1399, 1384, 1369, 1351, 1336, 1321, 1306, 1291, 1417, 1417,
 /*    20 */  1417, 1417, 1417, 1417, 1417, 1417, 1417,  227, 1435, 1434,
 /*    30 */  1144,  487, 1669, 1657, 1652, 1640, 1629, 1628, 1617, 1605,
 /*    40 */  1603, 1591, 1586, 1574, 1572, 1557, 1555, 1543, 1532, 1531,
 /*    50 */  1520, 1508, 1506, 1494, 1489, 1477, 1469, 1454, 1449, 1113,
 /*    60 */   649, 1415, 1240, 1065, 1040, 1015,  990,  965,  940,  915,
 /*    70 */   890, 1112,  865,  840,  815,  790,  765,  740,  -83,   31,
 /*    80 */    25,  214,  176,  -34,  270,  270,  581,  571,  270,   39,
 /*    90 */   764,  737,  714,  711,  704,  703,  695,  666,  643,  636,
 /*   100 */   624,  609,  579,  575,  547,  443,  405,  329,  248,  210,
 /*   110 */   172,  -51,  -63,  549,  522,  479,  454,  415,  377,  -24,
 /*   120 */   346,  339,  301,  194,  154,   80,   42,  -47,  388,  376,
 /*   130 */   375,  391,  384,  382,  354,  352,  355,  336,  355,  318,
 /*   140 */   324,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   348,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    10 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    20 */   501,  501,  501,  501,  501,  501,  349,  501,  501,  501,
 /*    30 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    40 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    50 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    60 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    70 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*    80 */   501,  348,  348,  501,  395,  395,  439,  443,  395,  501,
 /*    90 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*   100 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*   110 */   501,  501,  432,  426,  426,  426,  426,  426,  426,  501,
 /*   120 */   426,  426,  426,  426,  426,  426,  426,  426,  501,  501,
 /*   130 */   501,  501,  501,  349,  375,  501,  435,  501,  433,  474,
 /*   140 */   375,  467,  427,  428,  469,  466,  464,  462,  460,  458,
 /*   150 */   456,  455,  429,  410,  409,  401,  399,  405,  403,  372,
 /*   160 */   396,  420,  407,  369,  368,  485,  395,  501,  501,  395,
 /*   170 */   443,  501,  501,  355,  501,  501,  501,  501,  501,  501,
 /*   180 */   501,  501,  487,  501,  501,  501,  499,  500,  471,  501,
 /*   190 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*   200 */   501,  501,  501,  501,  501,  501,  501,  501,  501,  417,
 /*   210 */   501,  501,  411,  395,  501,  439,  368,  378,  501,  501,
 /*   220 */   501,  350,  362,  361,  365,  341,  389,  388,  387,  386,
 /*   230 */   367,  371,  376,  374,  377,  373,  370,  441,  440,  434,
 /*   240 */   431,  430,  354,  400,  402,  404,  406,  408,  475,  358,
 /*   250 */   490,  357,  489,  488,  486,  484,  483,  482,  481,  479,
 /*   260 */   478,  476,  477,  480,  498,  497,  496,  495,  494,  493,
 /*   270 */   492,  491,  465,  463,  461,  459,  457,  450,  453,  445,
 /*   280 */   444,  442,  470,  468,  451,  449,  448,  447,  446,  452,
 /*   290 */   436,  454,  438,  437,  356,  353,  473,  472,  425,  424,
 /*   300 */   423,  421,  422,  419,  418,  395,  416,  413,  412,  398,
 /*   310 */   397,  396,  415,  414,  394,  393,  392,  391,  390,  385,
 /*   320 */   383,  382,  381,  380,  379,  366,  364,  363,  360,  359,
 /*   330 */   352,  351,  347,  346,  345,  344,  343,  342,  340,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  r5ParserARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void r5ParserTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "AND",           "OP0",           "LT",          
  "CAST",          "NEQUAL",        "OP1",           "PIPE",        
  "OP2",           "NOT",           "DOT",           "DCOLON",      
  "DOT_DOLLAR",    "LSB",           "NL",            "SEMI",        
  "EOF",           "COMMA",         "CLASS",         "END",         
  "ID",            "TRAIT",         "DEF",           "EQUAL",       
  "LP",            "RP",            "SQUARE",        "SELF",        
  "NUM",           "NIL",           "TRUE",          "FALSE",       
  "IVAR",          "LITSTR",        "RSB",           "TUPLE_START", 
  "LIST",          "DICT_START",    "RB",            "LB",          
  "IF",            "ELSE",          "RETURN",        "RAISE",       
  "UNLESS",        "WHILE",         "IMPORT",        "DOT_NAME",    
  "AS",            "TRY",           "RESCUE",        "OP2_SET",     
  "OP1_SET",       "OP0_SET",       "error",         "program",     
  "opt_fin",       "l1",            "last_fin",      "fin",         
  "l1e",           "class",         "trait",         "def",         
  "stmt",          "fin_m",         "comma",         "seq",         
  "delim_seq",     "class_start",   "class_body",    "s2",          
  "trait_start",   "trait_body",    "def_start",     "def_body",    
  "arg",           "np_recv",       "id_list",       "opt_arg",     
  "opt_arg_list",  "def_args",      "def_name",      "def_scope",   
  "lit",           "np_arg",        "np_arg_list",   "lambda",      
  "np_arg_list_start",  "np_arg_list_elems",  "np_kw_arg",     "np_kw_arg_list_elems",
  "np_opt_kw_arg_list",  "lambda_start",  "lambda_args",   "cond",        
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= opt_fin l1 last_fin",
 /*   1 */ "l1 ::= l1 fin l1e",
 /*   2 */ "l1 ::= l1e",
 /*   3 */ "l1e ::= class",
 /*   4 */ "l1e ::= trait",
 /*   5 */ "l1e ::= def",
 /*   6 */ "l1e ::= stmt",
 /*   7 */ "fin_m ::= NL",
 /*   8 */ "fin_m ::= SEMI",
 /*   9 */ "opt_fin ::=",
 /*  10 */ "opt_fin ::= fin",
 /*  11 */ "last_fin ::= EOF",
 /*  12 */ "last_fin ::= fin EOF",
 /*  13 */ "fin ::= fin fin_m",
 /*  14 */ "fin ::= fin_m",
 /*  15 */ "comma ::= COMMA NL",
 /*  16 */ "comma ::= COMMA",
 /*  17 */ "seq ::= seq fin stmt",
 /*  18 */ "seq ::= stmt",
 /*  19 */ "delim_seq ::= seq opt_fin",
 /*  20 */ "class_start ::= CLASS",
 /*  21 */ "class_body ::= l1 fin END",
 /*  22 */ "class ::= class_start ID fin class_body",
 /*  23 */ "class ::= class_start ID LT s2 fin class_body",
 /*  24 */ "trait_start ::= TRAIT",
 /*  25 */ "trait_body ::= l1 fin END",
 /*  26 */ "trait ::= trait_start ID fin trait_body",
 /*  27 */ "def_start ::= DEF",
 /*  28 */ "def_body ::= seq fin END",
 /*  29 */ "arg ::= ID",
 /*  30 */ "arg ::= ID CAST np_recv",
 /*  31 */ "id_list ::= id_list comma arg",
 /*  32 */ "id_list ::= arg",
 /*  33 */ "opt_arg ::= ID EQUAL np_recv",
 /*  34 */ "opt_arg_list ::= opt_arg_list comma opt_arg",
 /*  35 */ "opt_arg_list ::= opt_arg",
 /*  36 */ "def_args ::=",
 /*  37 */ "def_args ::= LP id_list RP",
 /*  38 */ "def_args ::= LP id_list comma opt_arg_list RP",
 /*  39 */ "def_name ::= ID",
 /*  40 */ "def_name ::= OP0",
 /*  41 */ "def_name ::= LT",
 /*  42 */ "def_name ::= OP1",
 /*  43 */ "def_name ::= OP2",
 /*  44 */ "def_name ::= SQUARE",
 /*  45 */ "def_scope ::= ID",
 /*  46 */ "def_scope ::= SELF",
 /*  47 */ "def ::= def_start def_name def_args fin def_body",
 /*  48 */ "def ::= def_start def_name def_args fin END",
 /*  49 */ "def ::= def_start def_scope DOT def_args fin def_body",
 /*  50 */ "def ::= def_start def_scope DOT def_args fin END",
 /*  51 */ "lit ::= NUM",
 /*  52 */ "lit ::= NIL",
 /*  53 */ "lit ::= TRUE",
 /*  54 */ "lit ::= FALSE",
 /*  55 */ "lit ::= SELF",
 /*  56 */ "lit ::= ID",
 /*  57 */ "lit ::= IVAR",
 /*  58 */ "lit ::= LITSTR",
 /*  59 */ "np_arg ::= lit",
 /*  60 */ "np_arg ::= np_arg OP0 np_arg",
 /*  61 */ "np_arg ::= np_arg OP0 LP s2 RP",
 /*  62 */ "np_arg ::= np_arg LT np_arg",
 /*  63 */ "np_arg ::= np_arg LT LP s2 RP",
 /*  64 */ "np_arg ::= np_arg OP1 np_arg",
 /*  65 */ "np_arg ::= np_arg OP1 LP s2 RP",
 /*  66 */ "np_arg ::= np_arg PIPE np_arg",
 /*  67 */ "np_arg ::= np_arg PIPE LP s2 RP",
 /*  68 */ "np_arg ::= np_arg OP2 np_arg",
 /*  69 */ "np_arg ::= np_arg OP2 LP s2 RP",
 /*  70 */ "np_arg ::= np_arg CAST np_arg",
 /*  71 */ "np_arg ::= np_arg NEQUAL np_arg",
 /*  72 */ "np_arg ::= np_arg DOT",
 /*  73 */ "np_arg ::= np_arg DOT LP RP",
 /*  74 */ "np_arg ::= np_arg DOT LP np_arg_list RP",
 /*  75 */ "np_arg ::= ID LP RP",
 /*  76 */ "np_arg ::= ID LP np_arg_list RP",
 /*  77 */ "np_arg ::= np_arg DCOLON ID",
 /*  78 */ "np_arg ::= np_arg DOT_DOLLAR lit",
 /*  79 */ "np_arg ::= np_arg DOT_DOLLAR lit LP RP",
 /*  80 */ "np_arg ::= np_arg DOT_DOLLAR lit LP np_arg_list RP",
 /*  81 */ "np_arg ::= NOT np_arg",
 /*  82 */ "np_arg ::= lambda",
 /*  83 */ "np_arg ::= np_arg LSB np_arg_list RSB",
 /*  84 */ "np_arg ::= TUPLE_START np_arg_list RP",
 /*  85 */ "np_arg ::= LIST np_arg_list RSB",
 /*  86 */ "np_arg ::= DICT_START np_arg_list RB",
 /*  87 */ "np_arg_list_start ::=",
 /*  88 */ "np_arg_list_elems ::= np_arg_list_elems comma np_arg",
 /*  89 */ "np_arg_list_elems ::= np_arg",
 /*  90 */ "np_kw_arg ::= ID EQUAL np_arg",
 /*  91 */ "np_kw_arg_list_elems ::= np_kw_arg_list_elems comma np_kw_arg",
 /*  92 */ "np_kw_arg_list_elems ::= np_kw_arg",
 /*  93 */ "np_opt_kw_arg_list ::=",
 /*  94 */ "np_opt_kw_arg_list ::= comma np_kw_arg_list_elems",
 /*  95 */ "np_arg_list ::= np_arg_list_start np_arg_list_elems np_opt_kw_arg_list",
 /*  96 */ "np_arg_list ::= np_arg_list_start np_kw_arg_list_elems",
 /*  97 */ "np_recv ::= lit",
 /*  98 */ "np_recv ::= ID LP RP",
 /*  99 */ "np_recv ::= ID LP np_arg_list RP",
 /* 100 */ "np_recv ::= np_recv DOT",
 /* 101 */ "np_recv ::= np_recv DOT LP RP",
 /* 102 */ "np_recv ::= np_recv DOT LP np_arg_list RP",
 /* 103 */ "np_recv ::= np_recv DCOLON ID",
 /* 104 */ "np_recv ::= np_recv DOT_DOLLAR lit",
 /* 105 */ "np_recv ::= np_recv DOT_DOLLAR lit LP RP",
 /* 106 */ "np_recv ::= np_recv DOT_DOLLAR lit LP np_arg_list RP",
 /* 107 */ "np_recv ::= lambda",
 /* 108 */ "np_recv ::= TUPLE_START np_arg_list RP",
 /* 109 */ "np_recv ::= LIST np_arg_list RSB",
 /* 110 */ "np_recv ::= DICT_START np_arg_list RB",
 /* 111 */ "np_recv ::= np_recv LSB np_arg_list RSB",
 /* 112 */ "np_recv ::= LP s2 RP",
 /* 113 */ "s2 ::= np_recv DOT np_arg_list",
 /* 114 */ "s2 ::= np_recv DOT_DOLLAR lit np_arg_list",
 /* 115 */ "s2 ::= ID np_arg_list",
 /* 116 */ "s2 ::= np_recv CAST np_arg",
 /* 117 */ "s2 ::= np_recv OP0 np_arg",
 /* 118 */ "s2 ::= np_recv OP0 LP s2 RP",
 /* 119 */ "s2 ::= np_recv LT np_arg",
 /* 120 */ "s2 ::= np_recv LT LP s2 RP",
 /* 121 */ "s2 ::= np_recv OP1 np_arg",
 /* 122 */ "s2 ::= np_recv OP1 LP s2 RP",
 /* 123 */ "s2 ::= np_recv PIPE np_arg",
 /* 124 */ "s2 ::= np_recv PIPE LP s2 RP",
 /* 125 */ "s2 ::= np_recv OP2 np_arg",
 /* 126 */ "s2 ::= np_recv OP2 LP s2 RP",
 /* 127 */ "s2 ::= np_recv NEQUAL np_arg",
 /* 128 */ "s2 ::= np_recv",
 /* 129 */ "s2 ::= NOT s2",
 /* 130 */ "s2 ::= np_recv AND np_arg",
 /* 131 */ "s2 ::= np_recv DOT EQUAL s2",
 /* 132 */ "stmt ::= s2",
 /* 133 */ "lambda_start ::= LB",
 /* 134 */ "lambda_args ::= PIPE ID PIPE",
 /* 135 */ "lambda_args ::=",
 /* 136 */ "lambda ::= lambda_start lambda_args opt_fin delim_seq RB",
 /* 137 */ "cond ::= s2",
 /* 138 */ "cond ::= ID EQUAL s2",
 /* 139 */ "stmt ::= IF cond fin seq fin END",
 /* 140 */ "stmt ::= IF cond fin seq fin ELSE fin seq fin END",
 /* 141 */ "stmt ::= s2 IF s2",
 /* 142 */ "stmt ::= RETURN s2 IF s2",
 /* 143 */ "stmt ::= RAISE s2 IF s2",
 /* 144 */ "stmt ::= UNLESS cond fin seq fin END",
 /* 145 */ "stmt ::= WHILE cond fin seq fin END",
 /* 146 */ "stmt ::= IMPORT DOT_NAME",
 /* 147 */ "stmt ::= IMPORT DOT_NAME AS ID",
 /* 148 */ "stmt ::= IMPORT DOT_NAME DCOLON ID",
 /* 149 */ "stmt ::= IMPORT DOT_NAME DCOLON ID AS ID",
 /* 150 */ "stmt ::= TRY fin seq fin RESCUE fin seq fin END",
 /* 151 */ "stmt ::= TRY fin seq fin RESCUE ID CAST s2 fin seq fin END",
 /* 152 */ "stmt ::= ID EQUAL s2",
 /* 153 */ "stmt ::= ID OP2_SET s2",
 /* 154 */ "stmt ::= ID OP1_SET s2",
 /* 155 */ "stmt ::= ID OP0_SET s2",
 /* 156 */ "stmt ::= IVAR EQUAL s2",
 /* 157 */ "stmt ::= IVAR OP2_SET s2",
 /* 158 */ "stmt ::= IVAR OP1_SET s2",
 /* 159 */ "stmt ::= IVAR OP0_SET s2",
 /* 160 */ "stmt ::= RAISE s2",
 /* 161 */ "stmt ::= RETURN s2",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to r5Parser and r5ParserFree.
*/
void *r5ParserAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  r5ParserARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
  r5ParserARG_STORE; /* Quiet a warning about the arg not being used */
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from r5ParserAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void r5ParserFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int r5ParserStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   r5ParserARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   r5ParserARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 55, 3 },
  { 57, 3 },
  { 57, 1 },
  { 60, 1 },
  { 60, 1 },
  { 60, 1 },
  { 60, 1 },
  { 65, 1 },
  { 65, 1 },
  { 56, 0 },
  { 56, 1 },
  { 58, 1 },
  { 58, 2 },
  { 59, 2 },
  { 59, 1 },
  { 66, 2 },
  { 66, 1 },
  { 67, 3 },
  { 67, 1 },
  { 68, 2 },
  { 69, 1 },
  { 70, 3 },
  { 61, 4 },
  { 61, 6 },
  { 72, 1 },
  { 73, 3 },
  { 62, 4 },
  { 74, 1 },
  { 75, 3 },
  { 76, 1 },
  { 76, 3 },
  { 78, 3 },
  { 78, 1 },
  { 79, 3 },
  { 80, 3 },
  { 80, 1 },
  { 81, 0 },
  { 81, 3 },
  { 81, 5 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 83, 1 },
  { 83, 1 },
  { 63, 5 },
  { 63, 5 },
  { 63, 6 },
  { 63, 6 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 84, 1 },
  { 85, 1 },
  { 85, 3 },
  { 85, 5 },
  { 85, 3 },
  { 85, 5 },
  { 85, 3 },
  { 85, 5 },
  { 85, 3 },
  { 85, 5 },
  { 85, 3 },
  { 85, 5 },
  { 85, 3 },
  { 85, 3 },
  { 85, 2 },
  { 85, 4 },
  { 85, 5 },
  { 85, 3 },
  { 85, 4 },
  { 85, 3 },
  { 85, 3 },
  { 85, 5 },
  { 85, 6 },
  { 85, 2 },
  { 85, 1 },
  { 85, 4 },
  { 85, 3 },
  { 85, 3 },
  { 85, 3 },
  { 88, 0 },
  { 89, 3 },
  { 89, 1 },
  { 90, 3 },
  { 91, 3 },
  { 91, 1 },
  { 92, 0 },
  { 92, 2 },
  { 86, 3 },
  { 86, 2 },
  { 77, 1 },
  { 77, 3 },
  { 77, 4 },
  { 77, 2 },
  { 77, 4 },
  { 77, 5 },
  { 77, 3 },
  { 77, 3 },
  { 77, 5 },
  { 77, 6 },
  { 77, 1 },
  { 77, 3 },
  { 77, 3 },
  { 77, 3 },
  { 77, 4 },
  { 77, 3 },
  { 71, 3 },
  { 71, 4 },
  { 71, 2 },
  { 71, 3 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 5 },
  { 71, 3 },
  { 71, 1 },
  { 71, 2 },
  { 71, 3 },
  { 71, 4 },
  { 64, 1 },
  { 93, 1 },
  { 94, 3 },
  { 94, 0 },
  { 87, 5 },
  { 95, 1 },
  { 95, 3 },
  { 64, 6 },
  { 64, 10 },
  { 64, 3 },
  { 64, 4 },
  { 64, 4 },
  { 64, 6 },
  { 64, 6 },
  { 64, 2 },
  { 64, 4 },
  { 64, 4 },
  { 64, 6 },
  { 64, 9 },
  { 64, 12 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 3 },
  { 64, 2 },
  { 64, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  r5ParserARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= opt_fin l1 last_fin */
#line 32 "vm/parser.lm"
{ S->set_top(S->ret(yymsp[-1].minor.yy190.a)); }
#line 1412 "vm/parser.c.inc"
        break;
      case 1: /* l1 ::= l1 fin l1e */
      case 17: /* seq ::= seq fin stmt */ yytestcase(yyruleno==17);
#line 34 "vm/parser.lm"
{ yygotominor.yy190.a = S->seq(yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1418 "vm/parser.c.inc"
        break;
      case 2: /* l1 ::= l1e */
      case 3: /* l1e ::= class */ yytestcase(yyruleno==3);
      case 4: /* l1e ::= trait */ yytestcase(yyruleno==4);
      case 5: /* l1e ::= def */ yytestcase(yyruleno==5);
      case 6: /* l1e ::= stmt */ yytestcase(yyruleno==6);
      case 18: /* seq ::= stmt */ yytestcase(yyruleno==18);
      case 59: /* np_arg ::= lit */ yytestcase(yyruleno==59);
      case 82: /* np_arg ::= lambda */ yytestcase(yyruleno==82);
      case 97: /* np_recv ::= lit */ yytestcase(yyruleno==97);
      case 107: /* np_recv ::= lambda */ yytestcase(yyruleno==107);
      case 128: /* s2 ::= np_recv */ yytestcase(yyruleno==128);
      case 132: /* stmt ::= s2 */ yytestcase(yyruleno==132);
      case 137: /* cond ::= s2 */ yytestcase(yyruleno==137);
#line 35 "vm/parser.lm"
{ yygotominor.yy190.a = yymsp[0].minor.yy190.a; }
#line 1435 "vm/parser.c.inc"
        break;
      case 19: /* delim_seq ::= seq opt_fin */
      case 112: /* np_recv ::= LP s2 RP */ yytestcase(yyruleno==112);
#line 60 "vm/parser.lm"
{ yygotominor.yy190.a = yymsp[-1].minor.yy190.a; }
#line 1441 "vm/parser.c.inc"
        break;
      case 20: /* class_start ::= CLASS */
#line 62 "vm/parser.lm"
{ S->start_class(); }
#line 1446 "vm/parser.c.inc"
        break;
      case 21: /* class_body ::= l1 fin END */
      case 25: /* trait_body ::= l1 fin END */ yytestcase(yyruleno==25);
      case 28: /* def_body ::= seq fin END */ yytestcase(yyruleno==28);
#line 63 "vm/parser.lm"
{ yygotominor.yy190.a = yymsp[-2].minor.yy190.a; }
#line 1453 "vm/parser.c.inc"
        break;
      case 22: /* class ::= class_start ID fin class_body */
#line 65 "vm/parser.lm"
{
               yygotominor.yy190.a = S->ast_class(yymsp[-2].minor.yy0.s, 0, yymsp[0].minor.yy190.a);
             }
#line 1460 "vm/parser.c.inc"
        break;
      case 23: /* class ::= class_start ID LT s2 fin class_body */
#line 69 "vm/parser.lm"
{
               yygotominor.yy190.a = S->ast_class(yymsp[-4].minor.yy0.s, yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a);
             }
#line 1467 "vm/parser.c.inc"
        break;
      case 24: /* trait_start ::= TRAIT */
#line 73 "vm/parser.lm"
{ S->start_trait(); }
#line 1472 "vm/parser.c.inc"
        break;
      case 26: /* trait ::= trait_start ID fin trait_body */
#line 76 "vm/parser.lm"
{
               yygotominor.yy190.a = S->trait(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a);
             }
#line 1479 "vm/parser.c.inc"
        break;
      case 27: /* def_start ::= DEF */
#line 80 "vm/parser.lm"
{ S->start_def(); }
#line 1484 "vm/parser.c.inc"
        break;
      case 29: /* arg ::= ID */
#line 83 "vm/parser.lm"
{ S->def_arg(yymsp[0].minor.yy0.s); }
#line 1489 "vm/parser.c.inc"
        break;
      case 30: /* arg ::= ID CAST np_recv */
#line 84 "vm/parser.lm"
{ S->def_arg_cast(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1494 "vm/parser.c.inc"
        break;
      case 33: /* opt_arg ::= ID EQUAL np_recv */
#line 89 "vm/parser.lm"
{ S->def_opt_arg(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1499 "vm/parser.c.inc"
        break;
      case 39: /* def_name ::= ID */
      case 40: /* def_name ::= OP0 */ yytestcase(yyruleno==40);
      case 41: /* def_name ::= LT */ yytestcase(yyruleno==41);
      case 42: /* def_name ::= OP1 */ yytestcase(yyruleno==42);
      case 43: /* def_name ::= OP2 */ yytestcase(yyruleno==43);
      case 44: /* def_name ::= SQUARE */ yytestcase(yyruleno==44);
      case 45: /* def_scope ::= ID */ yytestcase(yyruleno==45);
#line 98 "vm/parser.lm"
{ yygotominor.yy190.s = yymsp[0].minor.yy0.s; }
#line 1510 "vm/parser.c.inc"
        break;
      case 46: /* def_scope ::= SELF */
#line 106 "vm/parser.lm"
{ yygotominor.yy190.s = S->string("self"); }
#line 1515 "vm/parser.c.inc"
        break;
      case 47: /* def ::= def_start def_name def_args fin def_body */
#line 108 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_def(yymsp[-3].minor.yy190.s, yymsp[0].minor.yy190.a);
            }
#line 1522 "vm/parser.c.inc"
        break;
      case 48: /* def ::= def_start def_name def_args fin END */
#line 111 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_def(yymsp[-3].minor.yy190.s, S->ast_nil());
            }
#line 1529 "vm/parser.c.inc"
        break;
      case 49: /* def ::= def_start def_scope DOT def_args fin def_body */
#line 115 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_def_spec(yymsp[-4].minor.yy190.s, yymsp[-3].minor.yy0.s, yymsp[0].minor.yy190.a);
            }
#line 1536 "vm/parser.c.inc"
        break;
      case 50: /* def ::= def_start def_scope DOT def_args fin END */
#line 119 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_def_spec(yymsp[-4].minor.yy190.s, yymsp[-3].minor.yy0.s, S->ast_nil());
            }
#line 1543 "vm/parser.c.inc"
        break;
      case 51: /* lit ::= NUM */
#line 123 "vm/parser.lm"
{ yygotominor.yy190.a = S->number(yymsp[0].minor.yy0.i); }
#line 1548 "vm/parser.c.inc"
        break;
      case 52: /* lit ::= NIL */
#line 124 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_nil();  }
#line 1553 "vm/parser.c.inc"
        break;
      case 53: /* lit ::= TRUE */
#line 125 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_true();  }
#line 1558 "vm/parser.c.inc"
        break;
      case 54: /* lit ::= FALSE */
#line 126 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_false(); }
#line 1563 "vm/parser.c.inc"
        break;
      case 55: /* lit ::= SELF */
#line 127 "vm/parser.lm"
{ yygotominor.yy190.a = S->self(); }
#line 1568 "vm/parser.c.inc"
        break;
      case 56: /* lit ::= ID */
#line 128 "vm/parser.lm"
{ yygotominor.yy190.a = S->named(yymsp[0].minor.yy0.s, yymsp[0].minor.yy0.line); }
#line 1573 "vm/parser.c.inc"
        break;
      case 57: /* lit ::= IVAR */
#line 129 "vm/parser.lm"
{ yygotominor.yy190.a = S->ivar_read(yymsp[0].minor.yy0.s); }
#line 1578 "vm/parser.c.inc"
        break;
      case 58: /* lit ::= LITSTR */
#line 130 "vm/parser.lm"
{ yygotominor.yy190.a = S->lit_str(yymsp[0].minor.yy0.s); }
#line 1583 "vm/parser.c.inc"
        break;
      case 60: /* np_arg ::= np_arg OP0 np_arg */
      case 62: /* np_arg ::= np_arg LT np_arg */ yytestcase(yyruleno==62);
      case 64: /* np_arg ::= np_arg OP1 np_arg */ yytestcase(yyruleno==64);
      case 66: /* np_arg ::= np_arg PIPE np_arg */ yytestcase(yyruleno==66);
      case 117: /* s2 ::= np_recv OP0 np_arg */ yytestcase(yyruleno==117);
      case 119: /* s2 ::= np_recv LT np_arg */ yytestcase(yyruleno==119);
      case 121: /* s2 ::= np_recv OP1 np_arg */ yytestcase(yyruleno==121);
      case 123: /* s2 ::= np_recv PIPE np_arg */ yytestcase(yyruleno==123);
      case 125: /* s2 ::= np_recv OP2 np_arg */ yytestcase(yyruleno==125);
#line 135 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_binop(yymsp[-1].minor.yy0.s, yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1596 "vm/parser.c.inc"
        break;
      case 61: /* np_arg ::= np_arg OP0 LP s2 RP */
      case 63: /* np_arg ::= np_arg LT LP s2 RP */ yytestcase(yyruleno==63);
      case 65: /* np_arg ::= np_arg OP1 LP s2 RP */ yytestcase(yyruleno==65);
      case 67: /* np_arg ::= np_arg PIPE LP s2 RP */ yytestcase(yyruleno==67);
      case 118: /* s2 ::= np_recv OP0 LP s2 RP */ yytestcase(yyruleno==118);
      case 120: /* s2 ::= np_recv LT LP s2 RP */ yytestcase(yyruleno==120);
      case 122: /* s2 ::= np_recv OP1 LP s2 RP */ yytestcase(yyruleno==122);
      case 124: /* s2 ::= np_recv PIPE LP s2 RP */ yytestcase(yyruleno==124);
      case 126: /* s2 ::= np_recv OP2 LP s2 RP */ yytestcase(yyruleno==126);
#line 137 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_binop(yymsp[-3].minor.yy0.s, yymsp[-4].minor.yy190.a, yymsp[-1].minor.yy190.a); }
#line 1609 "vm/parser.c.inc"
        break;
      case 68: /* np_arg ::= np_arg OP2 np_arg */
#line 155 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_binop(yymsp[-1].minor.yy0.cs, yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1614 "vm/parser.c.inc"
        break;
      case 69: /* np_arg ::= np_arg OP2 LP s2 RP */
#line 157 "vm/parser.lm"
{ yygotominor.yy190.a = S->ast_binop(yymsp[-3].minor.yy0.cs, yymsp[-4].minor.yy190.a, yymsp[-1].minor.yy190.a); }
#line 1619 "vm/parser.c.inc"
        break;
      case 70: /* np_arg ::= np_arg CAST np_arg */
      case 116: /* s2 ::= np_recv CAST np_arg */ yytestcase(yyruleno==116);
#line 160 "vm/parser.lm"
{ yygotominor.yy190.a = S->cast(yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1625 "vm/parser.c.inc"
        break;
      case 71: /* np_arg ::= np_arg NEQUAL np_arg */
      case 127: /* s2 ::= np_recv NEQUAL np_arg */ yytestcase(yyruleno==127);
#line 162 "vm/parser.lm"
{ yygotominor.yy190.a = S->not_(S->ast_binop("==", yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a)); }
#line 1631 "vm/parser.c.inc"
        break;
      case 72: /* np_arg ::= np_arg DOT */
      case 100: /* np_recv ::= np_recv DOT */ yytestcase(yyruleno==100);
#line 163 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_attr(yymsp[-1].minor.yy190.a, yymsp[0].minor.yy0.s); }
#line 1637 "vm/parser.c.inc"
        break;
      case 73: /* np_arg ::= np_arg DOT LP RP */
      case 101: /* np_recv ::= np_recv DOT LP RP */ yytestcase(yyruleno==101);
#line 164 "vm/parser.lm"
{ yygotominor.yy190.a = S->send(yymsp[-3].minor.yy190.a, yymsp[-2].minor.yy0.s); }
#line 1643 "vm/parser.c.inc"
        break;
      case 74: /* np_arg ::= np_arg DOT LP np_arg_list RP */
      case 102: /* np_recv ::= np_recv DOT LP np_arg_list RP */ yytestcase(yyruleno==102);
#line 166 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_args(yymsp[-4].minor.yy190.a, yymsp[-3].minor.yy0.s); }
#line 1649 "vm/parser.c.inc"
        break;
      case 75: /* np_arg ::= ID LP RP */
      case 98: /* np_recv ::= ID LP RP */ yytestcase(yyruleno==98);
#line 167 "vm/parser.lm"
{ yygotominor.yy190.a = S->self_send(yymsp[-2].minor.yy0.s); }
#line 1655 "vm/parser.c.inc"
        break;
      case 76: /* np_arg ::= ID LP np_arg_list RP */
      case 99: /* np_recv ::= ID LP np_arg_list RP */ yytestcase(yyruleno==99);
#line 169 "vm/parser.lm"
{ yygotominor.yy190.a = S->self_send_args(yymsp[-3].minor.yy0.s); }
#line 1661 "vm/parser.c.inc"
        break;
      case 77: /* np_arg ::= np_arg DCOLON ID */
      case 103: /* np_recv ::= np_recv DCOLON ID */ yytestcase(yyruleno==103);
#line 170 "vm/parser.lm"
{ yygotominor.yy190.a = S->dcolon(yymsp[-2].minor.yy190.a, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1667 "vm/parser.c.inc"
        break;
      case 78: /* np_arg ::= np_arg DOT_DOLLAR lit */
      case 104: /* np_recv ::= np_recv DOT_DOLLAR lit */ yytestcase(yyruleno==104);
#line 173 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_indirect(yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1673 "vm/parser.c.inc"
        break;
      case 79: /* np_arg ::= np_arg DOT_DOLLAR lit LP RP */
      case 105: /* np_recv ::= np_recv DOT_DOLLAR lit LP RP */ yytestcase(yyruleno==105);
#line 175 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_indirect(yymsp[-4].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1679 "vm/parser.c.inc"
        break;
      case 80: /* np_arg ::= np_arg DOT_DOLLAR lit LP np_arg_list RP */
      case 106: /* np_recv ::= np_recv DOT_DOLLAR lit LP np_arg_list RP */ yytestcase(yyruleno==106);
#line 177 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_indirect_args(yymsp[-5].minor.yy190.a, yymsp[-3].minor.yy190.a); }
#line 1685 "vm/parser.c.inc"
        break;
      case 81: /* np_arg ::= NOT np_arg */
      case 129: /* s2 ::= NOT s2 */ yytestcase(yyruleno==129);
#line 178 "vm/parser.lm"
{ yygotominor.yy190.a = S->not_(yymsp[0].minor.yy190.a); }
#line 1691 "vm/parser.c.inc"
        break;
      case 83: /* np_arg ::= np_arg LSB np_arg_list RSB */
      case 111: /* np_recv ::= np_recv LSB np_arg_list RSB */ yytestcase(yyruleno==111);
#line 181 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_args(yymsp[-3].minor.yy190.a, "[]"); }
#line 1697 "vm/parser.c.inc"
        break;
      case 84: /* np_arg ::= TUPLE_START np_arg_list RP */
      case 108: /* np_recv ::= TUPLE_START np_arg_list RP */ yytestcase(yyruleno==108);
#line 183 "vm/parser.lm"
{ yygotominor.yy190.a = S->tuple(); }
#line 1703 "vm/parser.c.inc"
        break;
      case 85: /* np_arg ::= LIST np_arg_list RSB */
      case 109: /* np_recv ::= LIST np_arg_list RSB */ yytestcase(yyruleno==109);
#line 184 "vm/parser.lm"
{ yygotominor.yy190.a = S->list(); }
#line 1709 "vm/parser.c.inc"
        break;
      case 86: /* np_arg ::= DICT_START np_arg_list RB */
      case 110: /* np_recv ::= DICT_START np_arg_list RB */ yytestcase(yyruleno==110);
#line 185 "vm/parser.lm"
{ yygotominor.yy190.a = S->dict(); }
#line 1715 "vm/parser.c.inc"
        break;
      case 87: /* np_arg_list_start ::= */
#line 187 "vm/parser.lm"
{ S->start_arg_list(); }
#line 1720 "vm/parser.c.inc"
        break;
      case 88: /* np_arg_list_elems ::= np_arg_list_elems comma np_arg */
      case 89: /* np_arg_list_elems ::= np_arg */ yytestcase(yyruleno==89);
#line 188 "vm/parser.lm"
{ S->add_arg(yymsp[0].minor.yy190.a); }
#line 1726 "vm/parser.c.inc"
        break;
      case 90: /* np_kw_arg ::= ID EQUAL np_arg */
#line 191 "vm/parser.lm"
{ S->add_kw_arg(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1731 "vm/parser.c.inc"
        break;
      case 113: /* s2 ::= np_recv DOT np_arg_list */
#line 223 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_args(yymsp[-2].minor.yy190.a, yymsp[-1].minor.yy0.s); }
#line 1736 "vm/parser.c.inc"
        break;
      case 114: /* s2 ::= np_recv DOT_DOLLAR lit np_arg_list */
#line 225 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_indirect_args(yymsp[-3].minor.yy190.a, yymsp[-1].minor.yy190.a); }
#line 1741 "vm/parser.c.inc"
        break;
      case 115: /* s2 ::= ID np_arg_list */
#line 226 "vm/parser.lm"
{ yygotominor.yy190.a = S->self_send_args(yymsp[-1].minor.yy0.s); }
#line 1746 "vm/parser.c.inc"
        break;
      case 130: /* s2 ::= np_recv AND np_arg */
#line 242 "vm/parser.lm"
{ yygotominor.yy190.a = S->and_(yymsp[-2].minor.yy190.a, yymsp[0].minor.yy190.a); }
#line 1751 "vm/parser.c.inc"
        break;
      case 131: /* s2 ::= np_recv DOT EQUAL s2 */
#line 244 "vm/parser.lm"
{ yygotominor.yy190.a = S->send_set_attr(yymsp[-3].minor.yy190.a, yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1756 "vm/parser.c.inc"
        break;
      case 133: /* lambda_start ::= LB */
#line 250 "vm/parser.lm"
{ S->start_lambda(); }
#line 1761 "vm/parser.c.inc"
        break;
      case 134: /* lambda_args ::= PIPE ID PIPE */
#line 252 "vm/parser.lm"
{ S->def_arg(yymsp[-1].minor.yy0.s); }
#line 1766 "vm/parser.c.inc"
        break;
      case 136: /* lambda ::= lambda_start lambda_args opt_fin delim_seq RB */
#line 255 "vm/parser.lm"
{ yygotominor.yy190.a = S->lambda(yymsp[-1].minor.yy190.a); }
#line 1771 "vm/parser.c.inc"
        break;
      case 138: /* cond ::= ID EQUAL s2 */
      case 152: /* stmt ::= ID EQUAL s2 */ yytestcase(yyruleno==152);
#line 260 "vm/parser.lm"
{ yygotominor.yy190.a = S->assign(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a, yymsp[-2].minor.yy0.line); }
#line 1777 "vm/parser.c.inc"
        break;
      case 139: /* stmt ::= IF cond fin seq fin END */
#line 262 "vm/parser.lm"
{ yygotominor.yy190.a = S->if_cond(yymsp[-4].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1782 "vm/parser.c.inc"
        break;
      case 140: /* stmt ::= IF cond fin seq fin ELSE fin seq fin END */
#line 264 "vm/parser.lm"
{ yygotominor.yy190.a = S->if_else(yymsp[-8].minor.yy190.a, yymsp[-6].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1787 "vm/parser.c.inc"
        break;
      case 141: /* stmt ::= s2 IF s2 */
#line 266 "vm/parser.lm"
{ yygotominor.yy190.a = S->if_cond(yymsp[0].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1792 "vm/parser.c.inc"
        break;
      case 142: /* stmt ::= RETURN s2 IF s2 */
#line 267 "vm/parser.lm"
{ yygotominor.yy190.a = S->if_cond(yymsp[0].minor.yy190.a, S->ret(yymsp[-2].minor.yy190.a)); }
#line 1797 "vm/parser.c.inc"
        break;
      case 143: /* stmt ::= RAISE s2 IF s2 */
#line 268 "vm/parser.lm"
{ yygotominor.yy190.a = S->if_cond(yymsp[0].minor.yy190.a, S->raise(yymsp[-2].minor.yy190.a)); }
#line 1802 "vm/parser.c.inc"
        break;
      case 144: /* stmt ::= UNLESS cond fin seq fin END */
#line 269 "vm/parser.lm"
{ yygotominor.yy190.a = S->unless(yymsp[-4].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1807 "vm/parser.c.inc"
        break;
      case 145: /* stmt ::= WHILE cond fin seq fin END */
#line 270 "vm/parser.lm"
{ yygotominor.yy190.a = S->while_(yymsp[-4].minor.yy190.a, yymsp[-2].minor.yy190.a); }
#line 1812 "vm/parser.c.inc"
        break;
      case 146: /* stmt ::= IMPORT DOT_NAME */
#line 274 "vm/parser.lm"
{ yygotominor.yy190.a = S->import(yymsp[0].minor.yy0.s); }
#line 1817 "vm/parser.c.inc"
        break;
      case 147: /* stmt ::= IMPORT DOT_NAME AS ID */
#line 275 "vm/parser.lm"
{ yygotominor.yy190.a = S->import(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1822 "vm/parser.c.inc"
        break;
      case 148: /* stmt ::= IMPORT DOT_NAME DCOLON ID */
#line 276 "vm/parser.lm"
{ yygotominor.yy190.a = S->import_one(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1827 "vm/parser.c.inc"
        break;
      case 149: /* stmt ::= IMPORT DOT_NAME DCOLON ID AS ID */
#line 277 "vm/parser.lm"
{ yygotominor.yy190.a = S->import_one(yymsp[-4].minor.yy0.s, yymsp[-2].minor.yy0.s, yymsp[0].minor.yy0.s); }
#line 1832 "vm/parser.c.inc"
        break;
      case 150: /* stmt ::= TRY fin seq fin RESCUE fin seq fin END */
#line 279 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_try(yymsp[-6].minor.yy190.a, yymsp[-2].minor.yy190.a);
            }
#line 1839 "vm/parser.c.inc"
        break;
      case 151: /* stmt ::= TRY fin seq fin RESCUE ID CAST s2 fin seq fin END */
#line 283 "vm/parser.lm"
{
              yygotominor.yy190.a = S->ast_try(yymsp[-9].minor.yy190.a, yymsp[-6].minor.yy0.s, yymsp[-4].minor.yy190.a, yymsp[-2].minor.yy190.a);
            }
#line 1846 "vm/parser.c.inc"
        break;
      case 153: /* stmt ::= ID OP2_SET s2 */
      case 154: /* stmt ::= ID OP1_SET s2 */ yytestcase(yyruleno==154);
      case 155: /* stmt ::= ID OP0_SET s2 */ yytestcase(yyruleno==155);
#line 288 "vm/parser.lm"
{ yygotominor.yy190.a = S->assign_op(yymsp[-2].minor.yy0.s, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1853 "vm/parser.c.inc"
        break;
      case 156: /* stmt ::= IVAR EQUAL s2 */
#line 291 "vm/parser.lm"
{ yygotominor.yy190.a = S->ivar_assign(yymsp[-2].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1858 "vm/parser.c.inc"
        break;
      case 157: /* stmt ::= IVAR OP2_SET s2 */
      case 158: /* stmt ::= IVAR OP1_SET s2 */ yytestcase(yyruleno==158);
      case 159: /* stmt ::= IVAR OP0_SET s2 */ yytestcase(yyruleno==159);
#line 293 "vm/parser.lm"
{ yygotominor.yy190.a = S->ivar_assign_op(yymsp[-2].minor.yy0.s, yymsp[-1].minor.yy0.s, yymsp[0].minor.yy190.a); }
#line 1865 "vm/parser.c.inc"
        break;
      case 160: /* stmt ::= RAISE s2 */
#line 298 "vm/parser.lm"
{ yygotominor.yy190.a = S->raise(yymsp[0].minor.yy190.a); }
#line 1870 "vm/parser.c.inc"
        break;
      case 161: /* stmt ::= RETURN s2 */
#line 299 "vm/parser.lm"
{ yygotominor.yy190.a = S->ret(yymsp[0].minor.yy190.a); }
#line 1875 "vm/parser.c.inc"
        break;
      default:
      /* (7) fin_m ::= NL */ yytestcase(yyruleno==7);
      /* (8) fin_m ::= SEMI */ yytestcase(yyruleno==8);
      /* (9) opt_fin ::= */ yytestcase(yyruleno==9);
      /* (10) opt_fin ::= fin */ yytestcase(yyruleno==10);
      /* (11) last_fin ::= EOF */ yytestcase(yyruleno==11);
      /* (12) last_fin ::= fin EOF */ yytestcase(yyruleno==12);
      /* (13) fin ::= fin fin_m */ yytestcase(yyruleno==13);
      /* (14) fin ::= fin_m */ yytestcase(yyruleno==14);
      /* (15) comma ::= COMMA NL */ yytestcase(yyruleno==15);
      /* (16) comma ::= COMMA */ yytestcase(yyruleno==16);
      /* (31) id_list ::= id_list comma arg */ yytestcase(yyruleno==31);
      /* (32) id_list ::= arg */ yytestcase(yyruleno==32);
      /* (34) opt_arg_list ::= opt_arg_list comma opt_arg */ yytestcase(yyruleno==34);
      /* (35) opt_arg_list ::= opt_arg */ yytestcase(yyruleno==35);
      /* (36) def_args ::= */ yytestcase(yyruleno==36);
      /* (37) def_args ::= LP id_list RP */ yytestcase(yyruleno==37);
      /* (38) def_args ::= LP id_list comma opt_arg_list RP */ yytestcase(yyruleno==38);
      /* (91) np_kw_arg_list_elems ::= np_kw_arg_list_elems comma np_kw_arg */ yytestcase(yyruleno==91);
      /* (92) np_kw_arg_list_elems ::= np_kw_arg */ yytestcase(yyruleno==92);
      /* (93) np_opt_kw_arg_list ::= */ yytestcase(yyruleno==93);
      /* (94) np_opt_kw_arg_list ::= comma np_kw_arg_list_elems */ yytestcase(yyruleno==94);
      /* (95) np_arg_list ::= np_arg_list_start np_arg_list_elems np_opt_kw_arg_list */ yytestcase(yyruleno==95);
      /* (96) np_arg_list ::= np_arg_list_start np_kw_arg_list_elems */ yytestcase(yyruleno==96);
      /* (135) lambda_args ::= */ yytestcase(yyruleno==135);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  r5ParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  r5ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  r5ParserARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 25 "vm/parser.lm"

  S->set_syntax_error();

  std::cout << "Syntax error at line " << S->line()
            << ", column " << S->column() << std::endl;
#line 1967 "vm/parser.c.inc"
  r5ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  r5ParserARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  r5ParserARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "r5ParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void r5Parser(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  r5ParserTOKENTYPE yyminor       /* The value for the token */
  r5ParserARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  r5ParserARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
